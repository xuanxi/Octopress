<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Steven Chen]]></title>
  <link href="http://xuanxi.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://xuanxi.github.io/"/>
  <updated>2014-08-18T21:39:18+08:00</updated>
  <id>http://xuanxi.github.io/</id>
  <author>
    <name><![CDATA[Steven Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Studio vs Eclipse: What Are the Main Differences?]]></title>
    <link href="http://xuanxi.github.io/blog/2014/08/07/android-studio-vs-eclipse-main-differences/"/>
    <updated>2014-08-07T14:09:55+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/08/07/android-studio-vs-eclipse-main-differences</id>
    <content type="html"><![CDATA[<p>原文：<br/>
<a href="http://www.avocarrot.com/blog/android-studio-vs-eclipse-main-differences/">http://www.avocarrot.com/blog/android-studio-vs-eclipse-main-differences/</a></p>

<p><img src="/images/androidstudio.png" alt="androidstudio" /></p>

<!--more-->


<p>Most of Google’s 2013 I/O event was about Android. One specific announcement managed to attract a lot of hype and that was no other than Google’s own Android IDE, Android Studio. It has been just over a year now since the first public release and Android Studio has come a long way, despite still being in beta. The IDE itself is based off the very popular IntelliJ IDEA from JetBrains and is being offered by Google for free.</p>

<p>Google 2013 I/O 大会的大部分内容是与 Android 相关，其中，专为 Android 打造的开发环境——Android Studio 无疑最引人注目。Android Studio 从公开第一个版本至今已经走过一个年头，尽管仍然处于 beta 版本（公开测试版），但相比一年前，Google 已经对其做了相当多的改进。Android Studio 基于非常著名的 JetBrains 公司的产品——IntelliJ IDEA，并免费提供给开发者。</p>

<p>On the other hand, Eclipse is more mature than ever and Google’s ADT plugin which transforms the popular IDE into a fully featured Android developing environment has become very stable. Eclipse feels like home for many Java developers and is a natural starting point for Java developers who want to get into Android development.</p>

<p>另一方面，基于 Google ADT 插件的 Eclipse 现在已经成为 Android 开发的一个非常成熟稳定的环境，作为要进入 Android 开发领域的 Java 开发人员，Eclipse 是一个自然而然的选择。</p>

<p>While both solutions look promising, which one has the edge over the other? In this blog we will compare the two in 5 distinct areas in an effort to reveal the main differences in the Android Studio vs Eclipse battle.</p>

<p>两个开发环境看起来都有不错的前景，那么哪个更具优势呢？本文试图从5个方面分析它们的不同。</p>

<h3>Build Tools</h3>

<p>Android Studio utilizes the fast growing Gradle build system. It builds on top of the concepts of Apache Ant and Apache Maven but it also introduces a Groovy DSL (Domain-Specific Language) that allows for scripted builds which opens up many automation possibilities like uploading your beta .apk to TestFlight for testing. Eclipse on the other hand uses Apache Ant as its main build system which a very robust XML based build system that many Java developers may already be familiar with.</p>

<p>Android Studio 使用了当前发展迅猛的 Gradle 构建系统，它基于 Groovy 脚本语言，可以实现比 Ant 和 Maven 更灵活的构建过程，如自动上传测试包。而 Eclipse 使用成熟健壮的 Ant 作为构建系统。</p>

<h3>Advanced Code Completion/Refactoring</h3>

<p>Both IDEs feature the standard Java code auto completion but in the case of Android Studio, Google has baked in deeper support for specific Android code and refactoring. Android Studio can refactor your code in places where it’s just not possible using Eclipse and ADT. In addition, in my opinion IntelliJ’s Java auto completion seems more “intelligent” and predicts better what I want to do so there is definitely an improvement in this area over Eclipse.</p>

<p>两个 IDE 都提供了代码补全和重构功能，不过，Android Studio 在对 Android 代码的补全和重构方面做了更好的支持。另外，我认为 IntelliJ 的 Java 代码补全更加智能，预判准确率更高，这个相比 Eclipse 无疑是一个进步。</p>

<h3>User Interface Design</h3>

<p>One of the main selling point Google used to market Android Studio when it came out was its completely redesigned user interface design tool. After working with it for some time, it’s clear that the new tool is much better than the old. It literally crashes it. The new interface design tool in Android Studio is faster, responds to changes more rapidly and has more customization options that with Eclipse, you had to manually set in the XML.</p>

<p>用户界面设计工具是 Android Studio 的一个主要卖点。比起 ADT，Android Studio 上的设计工具更快、更灵活，比如在 Android Studio 的设计面板上可以直接设置元素属性，而在 Eclipse 上只能手动修改 XML 文件。</p>

<h3>Project Organization</h3>

<p>Both IDEs work differently in an effort to help you manage and organize your projects. If you’ve used Eclipse then you must be familiar with the concept of workspaces. When Eclipse starts, you select the workspace that contains your projects and you can load all project of that workspace in your tree navigation. If you want to switch to a project in a different workspace, then you have to restart the whole IDE. Android Studio treats this situation differently by introducing the concept of modules. Your app could be one module, a library that you just downloaded can be another and the Ad SDK you are currently integrating could be a third. Each of these modules can have their own Gradle build files and declare their own dependencies. To me, Android Studio seems more natural but it takes some time to get used to if you have been using Eclipse for a long time.</p>

<p>两个 IDE 在工程组织上各不相同。Eclipse 使用 workspace &ndash; project 的结构，Android Studio 使用 project &ndash; module 的结构，我更偏向 Android Studio 的组织方式。（从表面上看，貌似也没多大差别啊）</p>

<h3>IDE Performance/Stability</h3>

<p>Eclipse is a purely Java based software, and a big one. In order to run it reliably you need to have more than decent amount of RAM and good CPU power to back it up. Many user who do not strictly meet these criteria are reporting very bad experiences with it. It is not unusual for Eclipse to crash while exporting an apk or having to restart it after using it for a few hours straight. Having said that, Android Studio is still in beta so it comes with its own bugs that crash the IDE every now and then but in the meanwhile, the whole experience feels faster and more robust.</p>

<p>Eclipse 是一个使用纯 Java 语言编写的程序，由于它是基于可扩展的设计思想，即通过各种插件来提供特定开发环境，所以本身体积较大，运行时需要较多的内存和 CPU 资源，你可能会遇到这样的情况：打包 apk 时程序崩溃了，或者运行几个小时后因为响应太慢而不得不重启。对于 Android Studio ，上面已经提到它仍然处于 beta 阶段，会偶尔崩溃，不过，现时它的整体体验已经相对更快和更稳定。</p>

<h3>Conclusion</h3>

<p>Having used both Android Studio and Eclipse for a while now, I would personally say that Android Studio has the edge over the two. It might be a bit unstable yet and some updates require a complete re-installation of the software but when it eventually comes out of beta, it will blow Eclipse with ADT out of the water. I especially like the stability of the editor and not having to reboot every now and then, the new and improved UI designer and the sexy themes that make Android Studio a real eye candy. What side will you take in the Android Studio vs Eclipse battle?</p>

<p>我同时使用 Android Studio 和 Eclipse 已有一段时间，我个人认为 Android Studio 更具优势，虽然存在不稳定性，以及升级可能需要重装，但就在 beta 版发布之后，它完全可以击败 Eclipse。我尤其喜欢它的编辑器的稳定、无需重启、增强的界面设计和性感的外观。</p>

<h2>我的看法</h2>

<p>和本文作者一样，我也同时使用这两个 IDE 一段时间了（公司用 Eclipse，个人用 Android Studio），并同样感受到 Android Studio 的明显优势：<br/>
1. 快，无论是启动程序，还是打开 XML 文件，都可以明显看出两个 IDE 的速度差别；<br/>
2. 酷，那个 Darcula 的外观实在比 Eclipse 呆板的外观好看得多（Eclipse 中可使用 color theme 来美化外观，但个人觉得也比不上 Android Studio）。<br/>
对于重构和新的界面设计工具，我的使用经验还不多，这里就不作评论了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[置顶]Android官方文档阅读笔记]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/29/reading-android-manual/"/>
    <updated>2014-07-29T15:10:22+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/29/reading-android-manual</id>
    <content type="html"><![CDATA[<p>理解官方指南是每一位 Android 工程师技术进阶的必经之路，可惜很多人（包括我）并没有真正重视起来。随着开发工作的深入，我决定开始认真研读，以下为所读文章的摘录、翻译和笔记，若有理解偏差的地方，欢迎大家批评指正。</p>

<!--more-->


<h2>设计指南-Design</h2>

<p>也许有人会说 Design 只是设计师的工作，对此我并不反对，但我认为作为一位合格的 Android 工程师必须首先理解 Android Design，这样才能更好地配合设计师开发出具有良好用户体验的产品。</p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/13/android-design-principles/">Android Design Principles</a><br/>
Android 设计准则。每一个新的 Android 应用都应该尽量基于这些准则去设计。另外，平时使用各种应用的时候也应该关注其设计的好坏，结合Android 设计准则进行分析，逐渐加深自己对用户体验的理解。<br/>
参考 <a href="http://blog.xuanxi.me/blog/2014/07/15/ios-design-principles/">iOS Design Principles</a></p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/15/android-ui-framework/">Android UI Framework</a><br/>
理解 Android 的界面框架，让应用与 Android 的用户体验保持一致。<br/>
参考 <a href="http://blog.xuanxi.me/blog/2014/07/15/bars/">iOS UI Framework</a></p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/16/android-style-1/">Android Style (1)</a><br/>
<a href="http://blog.xuanxi.me/blog/2014/07/29/android-style-2/">Android Style (2)</a><br/>
设计风格，主要是视觉方面。</p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/16/android-patterns-1/">Android Patterns (1)</a><br/>
设计模式，主要是交互方面。</p>

<h2>开发指南-Develop</h2>

<p><a href="http://blog.xuanxi.me/blog/2014/07/17/designing-for-multiple-screens/">Designing for Multiple Screens</a><br/>
屏幕适配。</p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/24/styles-and-themes/">Styles and Themes</a><br/>
风格与主题</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Style (2)]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/29/android-style-2/"/>
    <updated>2014-07-29T09:56:06+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/29/android-style-2</id>
    <content type="html"><![CDATA[<p>本篇包括以下内容：<br/>
6. Color<br/>
7. Iconography<br/>
8. Your Branding<br/>
9. Writing Style</p>

<!--more-->


<h2>6. Color</h2>

<h2>7. Iconography</h2>

<p><img src="/images/iconography_overview.png" alt="iconography_overview" /></p>

<p>图标就是⼀个直观的图形，占据屏幕一个小空间，用来代表⼀个操作、⼀种状态或者⼀个应用本身。</p>

<p>当你为应用设计图标时，需要紧记的是你的应用可能会被安装到多种分辨率的设备中。不过，你可以通过提供不同大小的图标来适配各种密度的设备。</p>

<p>因为你要提供多种规格图标来适配多种密度，下文中提到的图标尺寸都用 dp 为单位。dp 是以 MDPI 中的像素为基准的，即在 MDPI 中 1dp=1px，在 HDPI 中 1dp=1.5px，在 XHDPI 中 1dp=2px，如下图所示：</p>

<p><img src="/images/devices_displays_density@2x.png" alt="devices_displays_density@2x" /></p>

<p>这样，当你设计图标的时候，应该按照  2:3:4:6:8（或者 1:1.5:2:3:4） 的比例去缩放。例如，一个应用启动图标的规格为 48x48 dp，意味着 MDPI 的大小是 48x48 px，HDPI 的大小是 72x72 px，以此类推。</p>

<p>注意：Android 也支持一种更小的屏幕密度 LDPI，不过通常不需要考虑这种密度，因为 Android 会将 HDPI 中的图标缩小一半来适配它。<br/>
补充：在要求不太严格的情况下，我们可以只为高密度屏幕设计一套图标，比如 XHDPI，Android 会自动缩小尺寸适配所有密度屏幕。</p>

<h3>Launcher</h3>

<p>启动图标</p>

<p>启动图标用在 Home 界面和 All Apps 界面。因为用户可以改变 Home 的背景，所以要考虑启动图标是否能够在任何类型的背景中都清晰可见。</p>

<p><img src="/images/iconography_launcher_size.png" alt="iconography_launcher_size" /></p>

<p>Sizes &amp; scale <br/>
1. 启动图标在移动设备中必须为 48x48 dp；<br/>
2. 启动图标在 Google Play 中必须为 512x512 pixels。</p>

<p><img src="/images/iconography_launcher_focal.png" alt="iconography_launcher_focal" /></p>

<p>Proportions<br/>
图标不要留白，要占满 48x48 dp 大小。</p>

<p><img src="/images/iconography_launcher_style.png" alt="iconography_launcher_style" /></p>

<p>Style<br/>
Use a distinct silhouette. Three-dimensional, front view, with a slight perspective as if viewed from above, so that users perceive some depth.<br/>
使用清晰的轮廓。三维的正面视图，看起来稍微有点从上往下的俯视效果，使用户能看到⼀些景深。</p>

<p><img src="/images/iconography_launcher_example2.png" alt="iconography_launcher_example2" /></p>

<h3>Action Bar</h3>

<p>操作栏图标是⼀个图形按钮，用来表示用户在应用中可以执行的重要操作。使用简洁明了的图像代表将要执行的操作，让用户⼀目了然。</p>

<p>Android 内置了一些通用操作的图标供使用，例如“刷新”和“分享”。下面提供了图标包的下载链接，其中包括多种屏幕分辨率，以及对应 Holo Light和 Holo Dark 主题的图标。包中带有尚未样式化的图标，同时提供 Adobe® Illustrator® 源文件，你可以自由修改以搭配自⼰的主题。</p>

<p><a href="http://developer.android.com/downloads/design/Android_Design_Icons_20131106.zip">Download the Action Bar Icon Pack</a></p>

<p><img src="/images/iconography_actionbar_size.png" alt="iconography_actionbar_size" /></p>

<p>Sizes &amp; scale<br/>
Action bar icons for phones should be 32x32 dp.</p>

<p><img src="/images/iconography_actionbar_focal.png" alt="iconography_actionbar_focal" /></p>

<p>Focal area &amp; proportions<br/>
Full asset 整体大小, 32x32 dp<br/>
Optical square 实际内容, 24x24 dp</p>

<p><img src="/images/iconography_actionbar_style.png" alt="iconography_actionbar_style" /></p>

<p>Style<br/>
Pictographic, flat, not too detailed, with smooth curves or sharp shapes. If the graphic is thin, rotate it 45° left or right to fill the focal space. The thickness of the strokes and negative spaces should be a minimum of 2 dp.<br/>
形象化，扁平，不要⼩细节，使用平滑曲线或尖锐的轮廓。如果是瘦长型的图形，将它转45度角再填满内容区。线的宽度不应低于2 dp。</p>

<p><img src="/images/iconography_actionbar_colors.png" alt="iconography_actionbar_colors" /></p>

<p>Colors for Light<br/>
Colors: #333333<br/>
Enabled: 60% opacity<br/>
Disabled: 30% opacity</p>

<p>Colors for Dark<br/>
Colors: #FFFFFF<br/>
Enabled: 80% opacity<br/>
Disabled: 30% opacity</p>

<h3>Small / Contextual Icons</h3>

<p>小图标与上下文图标</p>

<p>在应用的主体区域中，使用⼩图标表示操作或者特定对象的状态。例如在 Gmail 应用中，每条信息都有⼀个星型图标用来标记“重要”。</p>

<p><img src="/images/iconography_small_size.png" alt="iconography_small_size" /></p>

<p>Sizes &amp; scale<br/>
Small icons should be 16x16 dp.</p>

<p><img src="/images/iconography_small_focal.png" alt="iconography_small_focal" /></p>

<p>Focal area &amp; proportions<br/>
Full asset, 16x16 dp<br/>
Optical square, 12x12 dp</p>

<p><img src="/images/iconography_small_style.png" alt="iconography_small_style" /></p>

<p>Style<br/>
Neutral, flat, and simple. Filled shapes are easier to see than thin strokes. Use a single visual metaphor so that a user can easily recognize and understand its purpose.<br/>
灰色为主、扁平和简单。最好使用填充图标而不是细线条勾勒。使用简单直观的图形，让用户容易理解图标的作用。</p>

<p><img src="/images/iconography_small_colors.png" alt="iconography_small_colors" /></p>

<p><img src="/images/iconography_small_example.png" alt="iconography_small_example" /></p>

<p>Colors<br/>
在特殊情况下使用非灰色的图标。例如在 Gmail 应用中，使用了黄色的星型图标表示重要的信息。如果图标是可点击的，使用和背景形成对比的颜色。</p>

<h3>Notification Icons</h3>

<p>通知图标</p>

<p><img src="/images/iconography_notification_size.png" alt="iconography_notification_size" /></p>

<p>Sizes &amp; scale<br/>
Notification icons must be 24x24 dp.</p>

<p><img src="/images/iconography_notification_focal.png" alt="iconography_notification_focal" /></p>

<p>Focal area &amp; proportions<br/>
Full asset, 24x24 dp<br/>
Optical square, 22x22 dp</p>

<p><img src="/images/iconography_notification_style.png" alt="iconography_notification_style" /></p>

<p>Style<br/>
Keep the style flat and simple, using the same single, visual metaphor as your launcher icon.<br/>
扁平，简单，类似启动图标。</p>

<p><img src="/images/iconography_notification_example.png" alt="iconography_notification_example" /></p>

<p>Colors<br/>
Notification icons must be entirely white. Also, the system may scale down and/or darken the icons.<br/>
通知图标必须为纯白色，另外，系统会缩小图标或令图标变暗。</p>

<h3>Design Tips</h3>

<p>下面是一些图标设计建议，这些建议假设你使用 Photoshop 或者其它栅格或矢量图形工具。</p>

<h4>Use vector shapes where possible</h4>

<p>尽量使用矢量图</p>

<h4>Start with large artboards</h4>

<p>从大画板开始设计</p>

<h4>When scaling, redraw bitmap layers as needed</h4>

<p>？？</p>

<h4>Use common naming conventions for icon assets</h4>

<p> 使用统一的命名方法，使得所有图标在文件夹中会聚在一起并按字母顺序排列，如下图：</p>

<p><img src="/images/icon_common_naming.png" alt="icon_common_naming" /></p>

<h4>Set up a working space that organizes files by density</h4>

<p>为不同密度图标建立对应文件夹：
```
art/&hellip;</p>

<pre><code>mdpi/...
    _pre_production/...
        working_file.psd
    finished_asset.png
hdpi/...
    _pre_production/...
        working_file.psd
    finished_asset.png
xhdpi/...
    _pre_production/...
        working_file.psd
    finished_asset.png
</code></pre>

<p>```</p>

<h4>Remove unnecessary metadata from final assets</h4>

<p>尽管 Android 在打包时会自动压缩 png 图片，但图片中仍然包含着不必要的头部信息和 metadata，你应该把这些信息也删除掉。可以使用以下两个工具：<br/>
<a href="http://optipng.sourceforge.net/">OptiPNG</a><br/>
<a href="http://pmt.sourceforge.net/pngcrush/">Pngcrush</a>。</p>

<h2>8. Your Branding</h2>

<p>你的品牌</p>

<p>遵循 Android 的设计模式并不意味着你的应用和其它应用没什么区别，相反，你的应用可以表现出你的品牌的特点。</p>

<h3>Color</h3>

<p>品牌颜色</p>

<p>用你的品牌颜色取代 Android 默认的蓝色，新的颜色将会体现在复选框、进度条、单选按钮、滑动条、tab 按钮、滑动指示等常用控件上。</p>

<p>在合适的地方用高对比度的颜色来作强调，比如 action bar 的背景颜色或者一个主要的按钮。记住不要过度使用这种颜色，因为不是所有操作都同等重要，所以只能用在一到两个最重要的地方。</p>

<p>在自定义颜色的时候，记得对触摸反馈也做出轻微调整——比原始状态稍亮或稍暗，具体可参考 “3.Touch Feedback”。</p>

<p><img src="/images/branding_wallet.png" alt="branding_wallet" /></p>

<p>The four colors of the Google Wallet logo provide a playful accent to the four dots that appear as the user enters a PIN.</p>

<p><img src="/images/branding_googlemusic.png" alt="branding_googlemusic" /></p>

<p>The Google Play Music app has an orange theme color, which is used for emphasis in the action bar and for accent in the selected tab, scroll indicator, and hyperlinks.</p>

<h3>Logo</h3>

<p>品牌 logo</p>

<p>首先要明确的是，启动图标（launcher icon）不等于 logo，启动图标只是基于 logo 设计的图标。不过，启动图标是一个展示品牌 logo 的关键，因为用户要寻找它并通过它来启动应用。直接把启动图标放在 action bar 上就可以达到展示品牌的目的。</p>

<p>另一方法是将 logo 放在 action bar 上，而不是使用启动图标和应用名字。</p>

<p><img src="/images/branding_launcher_icon.png" alt="branding_launcher_icon" /></p>

<p><img src="/images/branding_logo_icon_action_bar.png" alt="branding_logo_icon_action_bar" /></p>

<p>Google+ 直接把启动图标放在 action bar 上。</p>

<p><img src="/images/yourbranding_app.png" alt="yourbranding_app" /></p>

<p>将 logo 放在 action bar 上的例子。</p>

<h3>Icons</h3>

<p>品牌图标</p>

<p>如果你在其它平台的 app 上有符合你的品牌要求的图标，也可以用到 Android 上来，但要确保品牌与这些图标的风格一致。</p>

<p><img src="/images/yourbranding_in-app-icons.png" alt="yourbranding_in-app-icons" /></p>

<p>One exception: For any icon in your existing set where the symbol is different from Android&rsquo;s, use Android&rsquo;s symbol but give it your brand&rsquo;s styling. That way, users will understand what the purpose of the icon is based on what they&rsquo;ve learned in other Android apps (Design principle: Give me tricks that work everywhere). But the icon will still look like it belongs with all of your other icons as a part of your brand.</p>

<p>Example:<br/>
The brand&rsquo;s normal icon for sharing on other platforms is a right arrow.</p>

<p><img src="/images/yourbranding_sharing.png" alt="yourbranding_sharing" /></p>

<p>如果你没有自己的图标，并且只创建 Android 应用，这样的话，可以使用 Android 提供的标准图标，而通过颜色和 logo 来展示你的品牌。（对设计能力不足的小团队可以这样做）</p>

<h2>9. Writing Style</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Styles and Themes]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/24/styles-and-themes/"/>
    <updated>2014-07-24T17:50:10+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/24/styles-and-themes</id>
    <content type="html"><![CDATA[<p>原文：<br/>
<a href="http://developer.android.com/guide/topics/ui/themes.html">http://developer.android.com/guide/topics/ui/themes.html</a></p>

<p>A style is a collection of properties that specify the look and format for a View or window. A style can specify properties such as height, padding, font color, font size, background color, and much more. A style is defined in an XML resource that is separate from the XML that specifies the layout.</p>

<p>一个 style 是某些属性的集合，这些属性定义了 view 或 window 的外观和格式，比如 height、padding、font color、font size、background color 等。</p>

<!--more-->


<p>Styles in Android share a similar philosophy to cascading stylesheets in web design—they allow you to separate the design from the content.</p>

<p>与 web 设计中的 CSS 相似，Android style 的目的是设计与内容分离。</p>

<p>例如，使用 style 的话，你可以将以下代码：
```
&lt;TextView</p>

<pre><code>android:layout_width="fill_parent"
android:layout_height="wrap_content"
android:textColor="#00FF00"
android:typeface="monospace"
android:text="@string/hello" /&gt;
</code></pre>

<p><code>
替换为：
</code>
&lt;TextView</p>

<pre><code>style="@style/CodeFont"
android:text="@string/hello" /&gt;    
</code></pre>

<p>```
A theme is a style applied to an entire Activity or application, rather than an individual View (as in the example above). When a style is applied as a theme, every View in the Activity or application will apply each style property that it supports. For example, you can apply the same CodeFont style as a theme for an Activity and then all text inside that Activity will have green monospace font.</p>

<p>theme 就是一个用于 Activity 和 application 的 style，而普通的 style 只用于单独的 view。当 style 被当做 theme 使用之后，在 Activity 或 application 中的所有 view 都会应用该 style 的属性。例如，你可以将一个字体 style 用作一个 Activity 的 theme，然后该 Activity 里的所有文本都会使用这个字体。</p>

<h2>Defining Styles</h2>

<p>To create a set of styles, save an XML file in the res/values/ directory of your project. The name of the XML file is arbitrary, but it must use the .xml extension and be saved in the res/values/ folder.<br/>
The root node of the XML file must be <code>&lt;resources&gt;</code>.</p>

<p>要创建一组 style，首先在 res/values/ 目录下创建一个 xml 文件，文件名可自定义，通常为 styles.xml。<br/>
文件的根节点为 <code>&lt;resoueces&gt;</code>。</p>

<p>以下为一个 style 示例：
```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<resources></p>

<pre><code>&lt;style name="CodeFont" parent="@android:style/TextAppearance.Medium"&gt;
    &lt;item name="android:layout_width"&gt;fill_parent&lt;/item&gt;
    &lt;item name="android:layout_height"&gt;wrap_content&lt;/item&gt;
    &lt;item name="android:textColor"&gt;#00FF00&lt;/item&gt;
    &lt;item name="android:typeface"&gt;monospace&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p></resources>
<code>``
Each child of the</code><resources><code>element is converted into an application resource object at compile-time, which can be referenced by the value in the</code><style>` element&rsquo;s name attribute. This example style can be referenced from an XML layout as @style/CodeFont (as demonstrated in the introduction above).</p>

<p>每个 <code>&lt;resources&gt;</code> 元素的子节点在编译时都被转换为一个应用程序资源对象，其可以通过 <code>&lt;style&gt;</code> 元素的 <code>name</code> 属性的值来引用，如 <code>style="@style/CodeFont"</code>。</p>

<p>The parent attribute in the <code>&lt;style&gt;</code> element is optional and specifies the resource ID of another style from which this style should inherit properties. You can then override the inherited style properties if you want to.</p>

<p><code>&lt;style&gt;</code> 中的 parent 属性是可选的，用来指定另外一个 style 的资源ID，前者继承后者的所有属性。你也可以覆写继承来的 style 属性。</p>

<p>Remember, a style that you want to use as an Activity or application theme is defined in XML exactly the same as a style for a View. A style such as the one defined above can be applied as a style for a single View or as a theme for an entire Activity or application. How to apply a style for a single View or as an application theme is discussed later.</p>

<p>用在 Activity 或应用程序上的 theme 的定义方式和 style 的定义方式是相同的。一个如同上面那样例子中定义的 style 既可以用作一个 View的 style，也可以用作一个 Activity 或应用程序的 theme。</p>

<h3>Inheritance</h3>

<p>The parent attribute in the <code>&lt;style&gt;</code> element lets you specify a style from which your style should inherit properties. You can use this to inherit properties from an existing style and then define only the properties that you want to change or add. You can inherit from styles that you&rsquo;ve created yourself or from styles that are built into the platform. (See Using Platform Styles and Themes, below, for information about inheriting from styles defined by the Android platform.) For example, you can inherit the Android platform&rsquo;s default text appearance and then modify it:</p>

<p>parent 属性让你可以继承一个 style，然后定义你想改变或添加的属性。你可以从自定义的 style 或者平台的 style 中继承：
```</p>

<pre><code>&lt;style name="GreenText" parent="@android:style/TextAppearance"&gt;
    &lt;item name="android:textColor"&gt;#00FF00&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>```
If you want to inherit from styles that you&rsquo;ve defined yourself, you do not have to use the parent attribute. Instead, just prefix the name of the style you want to inherit to the name of your new style, separated by a period. For example, to create a new style that inherits the CodeFont style defined above, but make the color red, you can author the new style like this:</p>

<p>如果你要继承自定义的 style，不必用到 parent，仅需要把父 style 名字作为新 style 名字的前缀即可，中间用点分隔：
```</p>

<pre><code>&lt;style name="CodeFont.Red"&gt;
    &lt;item name="android:textColor"&gt;#FF0000&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p><code>``
Notice that there is no parent attribute in the</code><style>` tag, but because the name attribute begins with the CodeFont style name (which is a style that you have created), this style inherits all style properties from that style. This style then overrides the android:textColor property to make the text red. You can reference this new style as @style/CodeFont.Red.</p>

<p>上面的 style 使用 <code>@style/CodeFont.Red</code> 来引用。</p>

<p>You can continue inheriting like this as many times as you&rsquo;d like, by chaining names with periods. For example, you can extend CodeFont.Red to be bigger, with:</p>

<p>也可以多次继承：
```</p>

<pre><code>&lt;style name="CodeFont.Red.Big"&gt;
    &lt;item name="android:textSize"&gt;30sp&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>```
Note: This technique for inheritance by chaining together names only works for styles defined by your own resources. You can&rsquo;t inherit Android built-in styles this way. To reference a built-in style, such as TextAppearance, you must use the parent attribute.</p>

<p>要注意的是，前缀加点间隔的方法仅使用与自定义的 style，并不适用于平台内建的 style。</p>

<h3>Style Properties</h3>

<p>Now that you understand how a style is defined, you need to learn what kind of style properties—defined by the <item> element—are available. You&rsquo;re probably familiar with some already, such as layout_width and textColor. Of course, there are many more style properties you can use.</p>

<p>接下来，你需要了解在 <code>&lt;style&gt;</code> 的 <code>&lt;item&gt;</code> 元素中可以定义哪些属性值。比如你可能已经知道的 layout_width 和 textColor 等等。</p>

<p>The best place to find properties that apply to a specific View is the corresponding class reference, which lists all of the supported XML attributes. For example, all of the attributes listed in the table of TextView XML attributes can be used in a style definition for a TextView element (or one of its subclasses). One of the attributes listed in the reference is android:inputType, so where you might normally place the android:inputType attribute in an <EditText> element, like this:</p>

<p>要知道某个 view 的所有属性，最好的地方就是它的官方参考文档（比如 TextView 的 &lt;<a href="http://developer.android.com/reference/android/widget/TextView.html%EF%BC%89%EF%BC%8C%E5%9C%A8">http://developer.android.com/reference/android/widget/TextView.html%EF%BC%89%EF%BC%8C%E5%9C%A8</a> XML Attributes 的地方就列出了所有支持的属性，这些属性都可以用在 style 里。</p>

<p>下面以 EditText 的 android:inputType 属性为例子，一般情况你可以在布局中直接使用：
```
&lt;EditText</p>

<pre><code>android:inputType="number"
... /&gt;
</code></pre>

<p><code>
你也可以定义一个 style：
</code></p>



<p><code>
然后你的布局变成这样：
</code>
&lt;EditText</p>

<pre><code>style="@style/Numbers"
... /&gt;
</code></pre>

<p>```
This simple example may look like more work, but when you add more style properties and factor-in the ability to re-use the style in various places, the pay-off can be huge.</p>

<p>这个例子看起来是增加了工作量，但当你的 style 里包含了更多的属性，并且在多个布局中都使用到这个 style 的时候，style 的作用就会凸显。</p>

<p>For a reference of all available style properties, see the R.attr reference. Keep in mind that all View objects don&rsquo;t accept all the same style attributes, so you should normally refer to the specific View class for supported style properties. However, if you apply a style to a View that does not support all of the style properties, the View will apply only those properties that are supported and simply ignore the others.</p>

<p>要知道的是，不是所有的 View 都接受相同的 style 属性，所以你应该先查看所支持的属性。不过，如果一个 style 中包含了 View 不支持的属性，这些属性会被忽略。</p>

<p>Some style properties, however, are not supported by any View element and can only be applied as a theme. These style properties apply to the entire window and not to any type of View. For example, style properties for a theme can hide the application title, hide the status bar, or change the window&rsquo;s background. These kind of style properties do not belong to any View object. To discover these theme-only style properties, look at the R.attr reference for attributes that begin with window. For instance, windowNoTitle and windowBackground are style properties that are effective only when the style is applied as a theme to an Activity or application. See the next section for information about applying a style as a theme.</p>

<p>有些属性不被任何 View 支持，只能用作 theme，比如隐藏应用标题栏，隐藏状态栏，改变窗口背景等。<a href="http://developer.android.com/reference/android/R.attr.html">R.attr</a> 中以 <code>windows</code> 起头的属性就是这样的属性。</p>

<p>Note: Don&rsquo;t forget to prefix the property names in each <code>&lt;item&gt;</code> element with the android: namespace. For example: <code>&lt;item name="android:inputType"&gt;</code>.</p>

<p>注意，每一个属性要使用 <code>android:</code> 作为命名空间。</p>

<h2>Applying Styles and Themes to the UI</h2>

<p>应用 Styles 和 Themes</p>

<p>有两种方式设置一个 style：<br/>
对一个独立的 View，添加 style 属性到你的布局的 View 元素中：
```
&lt;TextView</p>

<pre><code>style="@style/CodeFont"
android:text="@string/hello" /&gt;
</code></pre>

<p><code>
对一个 Activity 或应用，添加 `android:theme` 属性到 Android manifest 的 `&lt;activity&gt;` 或 `&lt;application&gt;` 元素中：
</code>
<application android:theme="@style/CustomTheme">
<activity android:theme="@style/CustomTheme">
```</p>

<h2>Using Platform Styles and Themes</h2>

<p>The Android platform provides a large collection of styles and themes that you can use in your applications. You can find a reference of all available styles in the R.style class. To use the styles listed here, replace all underscores in the style name with a period. For example, you can apply the Theme_NoTitleBar theme with &ldquo;@android:style/Theme.NoTitleBar&rdquo;.</p>

<p>Android 平台提供了大量的 style 和 theme 供你使用。你可以在<a href="http://developer.android.com/reference/android/R.style.html">R.style</a> 类中找到所有可用的 style，只需要用句号替换 style 名称中的下划线即可。例如，你可以通过 <code>@android:style/Theme.NoTitleBar</code> 使用 Theme_NoTitleBar theme。</p>

<p>The R.style reference, however, is not well documented and does not thoroughly describe the styles, so viewing the actual source code for these styles and themes will give you a better understanding of what style properties each one provides. For a better reference to the Android styles and themes, see the following source code:</p>

<p>由于 <a href="http://developer.android.com/reference/android/R.style.html">R.style</a> 文档的不完善，你可以查看源码以更深入了解这些 style 的定义情况：<br/>
<a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/res/res/values/styles.xml">Android Styles (styles.xml)</a><br/>
<a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/res/res/values/themes.xml">Android Themes (themes.xml)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing for Multiple Screens]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/17/designing-for-multiple-screens/"/>
    <updated>2014-07-17T22:07:15+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/17/designing-for-multiple-screens</id>
    <content type="html"><![CDATA[<p>原文：<br/>
<a href="http://developer.android.com/training/multiscreen/index.html">http://developer.android.com/training/multiscreen/index.html</a></p>

<p>Android powers hundreds of device types with several different screen sizes, ranging from small phones to large TV sets. Therefore, it’s important that you design your application to be compatible with all screen sizes so it’s available to as many users as possible.<br/>
But being compatible with different device types is not enough. Each screen size offers different possibilities and challenges for user interaction, so in order to truly satisfy and impress your users, your application must go beyond merely supporting multiple screens: it must optimize the user experience for each screen configuration.</p>

<p>Android 设备的多样性要求应用的显示要适配多种屏幕尺寸，但仅仅让应用正常显示在多种屏幕上并不足够，因为不同尺寸的屏幕提供不同的交互能力，设计者应该做出适当优化以更好的利用屏幕。</p>

<p>本篇包含以下三部分：<br/>
1. Supporting Different Screen Sizes；<br/>
2. Supporting Different Screen Densities；<br/>
3. Implementing Adaptative UI Flows。</p>

<!--more-->


<p>推荐文章：<br/>
<a href="http://stormzhang.github.io/android/2014/05/16/android-screen-adaptation/">Android 屏幕适配</a></p>

<h2>1. Supporting Different Screen Sizes</h2>

<p>本篇将告诉你如何让应用支持不同尺寸的屏幕，有以下几种办法：<br/>
让布局自适应屏幕<br/>
根据屏幕的配置来加载合适的UI布局<br/>
确保正确的布局应用在正确的设备屏幕上<br/>
提供可以根据屏幕大小自动伸缩的图片</p>

<h3>Use &ldquo;wrap_content&rdquo; and &ldquo;match_parent&rdquo;</h3>

<p>To ensure that your layout is flexible and adapts to different screen sizes, you should use &ldquo;wrap_content&rdquo; and &ldquo;match_parent&rdquo; for the width and height of some view components.</p>

<p>使用 wrap_content 和 match_parent 可以确保布局自适应到不同的屏幕。</p>

<p><img src="/images/layout-hvga.png" alt="layout-hvga" /><br/>
上图中的横竖两种状态时是自动适配屏幕的。</p>

<h3>Use RelativeLayout</h3>

<p>You can construct fairly complex layouts using nested instances of LinearLayout and combinations of &ldquo;wrap_content&rdquo; and &ldquo;match_parent&rdquo; sizes. However, LinearLayout does not allow you to precisely control the spacial relationships of child views; views in a LinearLayout simply line up side-by-side. If you need child views to be oriented in variations other than a straight line, a better solution is often to use a RelativeLayout, which allows you to specify your layout in terms of the spacial relationships between components. For instance, you can align one child view on the left side and another view on the right side of the screen.</p>

<p>LinearLayout 用于简单的线性布局，而 RelativeLayout 提供了更灵活的手段去布置子控件。</p>

<p><img src="/images/relativelayout1.png" alt="relativelayout1" /></p>

<h3>Use Size Qualifiers 使用size限定符</h3>

<p>While those layouts adapt to different screens by stretching the space within and around components, they may not provide the best user experience for each screen size. Therefore, your application should not only implement flexible layouts, but should also provide several alternative layouts to target different screen configurations.</p>

<p>一种布局自适应所有屏幕并不代表提供了最好的用户体验，还要考虑为不同大小的屏幕建立不同的布局，以充分发挥不同尺寸屏幕的各自的优势。</p>

<p>For example, many applications implement the &ldquo;two pane&rdquo; pattern for large screens (the app might show a list of items on one pane and the content on another pane). Tablets and TVs are large enough for both panes to fit simultaneously on screen, but phone screens have to show them separately. So, to implement these layouts, you could have the following files:</p>

<p>举个例子，很多应用都会有两个功能窗口，一个是列表，一个是列表项详情，对于平板或电视的大屏幕，一次就可以展示这两个窗口，而手机屏幕只能展示一个。以下示例使用了一个 layout 布局和一个 layout-large 布局，应用在运行时会根据屏幕大小读取对应的布局：</p>

<p>res/layout/main.xml, single-pane (default) layout:
```
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:orientation="vertical"
android:layout_width="match_parent"
android:layout_height="match_parent"&gt;

&lt;fragment android:id="@+id/headlines"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.HeadlinesFragment"
          android:layout_width="match_parent" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>res/layout-large/main.xml, two-pane layout:
```
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="fill_parent"
android:layout_height="fill_parent"
android:orientation="horizontal"&gt;
&lt;fragment android:id="@+id/headlines"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.HeadlinesFragment"
          android:layout_width="400dp"
          android:layout_marginRight="10dp"/&gt;
&lt;fragment android:id="@+id/article"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.ArticleFragment"
          android:layout_width="fill_parent" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<h3>Use the Smallest-width Qualifier 使用最小宽度限定符</h3>

<p>One of the difficulties developers had in pre-3.2 Android devices was the &ldquo;large&rdquo; screen size bin, which encompasses the Dell Streak, the original Galaxy Tab, and 7" tablets in general. However, many applications may want to show different layouts for different devices in this category (such as for 5" and 7" devices), even though they are all considered to be &ldquo;large&rdquo; screens. That&rsquo;s why Android introduced the &ldquo;Smallest-width&rdquo; qualifier (amongst others) in Android 3.2.</p>

<p>在 3.2 版本系统之前，使用 Size 限定符有一个问题会让很多程序员感到头疼，large 到底是指多大呢？很多时候5寸和7寸都被当做 large，但很多应用都希望能够更自由地为不同屏幕设备加载不同的布局，不管它们是不是被系统认定为"large"。这就是Android为什么在3.2以后引入了"Smallest-width"限定符。</p>

<p>The Smallest-width qualifier allows you to target screens that have a certain minimum width given in dp. For example, the typical 7" tablet has a minimum width of 600 dp, so if you want your UI to have two panes on those screens (but a single list on smaller screens), you can use the same two layouts from the previous section for single and two-pane layouts, but instead of the large size qualifier, use sw600dp to indicate the two-pane layout is for screens on which the smallest-width is 600 dp:</p>

<p>Smallest-width 限定符允许你设定一个具体的最小值(以dp为单位)来指定屏幕。例如，7寸的平板最小宽度是600dp，所以如果你想让你的UI在这种屏幕上显示 two pane，在更小的屏幕上显示 single pane，你可以使用sw600dp来表示你想在600dp以上宽度的屏幕上使用 two pane 模式：</p>

<p>res/layout/main.xml, single-pane (default) layout:
```
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:orientation="vertical"
android:layout_width="match_parent"
android:layout_height="match_parent"&gt;

&lt;fragment android:id="@+id/headlines"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.HeadlinesFragment"
          android:layout_width="match_parent" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>res/layout-sw600dp/main.xml, two-pane layout:
```
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="fill_parent"
android:layout_height="fill_parent"
android:orientation="horizontal"&gt;
&lt;fragment android:id="@+id/headlines"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.HeadlinesFragment"
          android:layout_width="400dp"
          android:layout_marginRight="10dp"/&gt;
&lt;fragment android:id="@+id/article"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.ArticleFragment"
          android:layout_width="fill_parent" /&gt;
</code></pre>

<p></LinearLayout>
```
This means that devices whose smallest width is greater than or equal to 600dp will select the layout-sw600dp/main.xml (two-pane) layout, while smaller screens will select the layout/main.xml (single-pane) layout.</p>

<p>这意味着，那些最小屏幕宽度大于600dp的设备会选择 layout-sw600dp/main.xml(two-pane)布局，而更小屏幕的设备将会选择 layout/main.xml(single-pane)布局。</p>

<p>However, this won&rsquo;t work well on pre-3.2 devices, because they don&rsquo;t recognize sw600dp as a size qualifier, so you still have to use the large qualifier as well. So, you should have a file named res/layout-large/main.xml which is identical to res/layout-sw600dp/main.xml. In the next section you&rsquo;ll see a technique that allows you to avoid duplicating the layout files this way.</p>

<p>可是，3.2系统之前不支持 Smallest-width 限定符，你仍然需要 large 限定符去兼容那些老系统，即需要同时存在 layout-sw600dp 和 layout-large，并且里面的布局文件是一样的。可是，这样就造成重复定义布局的问题，下一节会介绍一种避免重复布局的技术。</p>

<h3>Use Layout Aliases 布局别名</h3>

<p>The smallest-width qualifier is available only on Android 3.2 and above. Therefore, you should also still use the abstract size bins (small, normal, large and xlarge) to be compatible with earlier versions. For example, if you want to design your UI so that it shows a single-pane UI on phones but a multi-pane UI on 7" tablets, TVs and other large devices, you&rsquo;d have to supply these files:<br/>
&hellip;</p>

<p>Smallest-width 限定符仅在 Android 3.2及之后的系统中有效。所以，你需要同时使用 Size 限定符(small, normal, large 和 xlarge)来兼容更早的系统。例如，你想手机上显示 single-pane 界面，而在7寸平板和更大屏的设备上显示 multi-pane 界面，你需要提供以下文件：<br/>
res/layout/main.xml: single-pane 布局<br/>
res/layout-large/main.xml: multi-pane 布局<br/>
res/layout-sw600dp/main.xml: multi-pane 布局</p>

<p>The last two files are identical, because one of them will be matched by Android 3.2 devices, and the other one is for the benefit of tablets and TVs with earlier versions of Android.</p>

<p>最后的两个文件是完全相同的，一个用于3.2及以上系统，一个用于3.2以下系统。</p>

<p>To avoid this duplication of the same file for tablets and TVs (and the maintenance headache resulting from it), you can use alias files. For example, you can define the following layouts:<br/>
&hellip;</p>

<p>使用别名来避免重复。例如，可以定义以下布局：<br/>
res/layout/main.xml, single-pane layout<br/>
res/layout/main_twopanes.xml, two-pane layout</p>

<p>加入以下两个 values 文件：</p>

<p>res/values-large/layout.xml:
```
<resources></p>

<pre><code>&lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</code></pre>

<p></resources>
```</p>

<p>res/values-sw600dp/layout.xml:
```
<resources></p>

<pre><code>&lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</code></pre>

<p></resources>
```</p>

<h3>Use Orientation Qualifiers 使用方向限定符</h3>

<p>Some layouts work well in both landscape and portrait orientations, but most of them can benefit from adjustments. In the News Reader sample app, here is how the layout behaves in each screen size and orientation:<br/>
&hellip;</p>

<p>有些布局在横竖屏时都显示正常，但大多数情况下可以做调整以显示更好。例如，在 News Reader 示例程序中，布局在不同屏幕尺寸和不同屏幕方向中是这样显示的：<br/>
小屏幕, 竖屏: 单面板, 显示logo<br/>
小屏幕, 横屏: 单面板, 显示logo<br/>
7寸平板, 竖屏: 单面板, 显示action bar<br/>
7寸平板, 横屏: 双面板, 宽, 显示action bar<br/>
10寸平板, 竖屏: 双面板, 窄, 显示action bar<br/>
10寸平板, 横屏: 双面板, 宽, 显示action bar<br/>
电视, 横屏: 双面板, 宽, 显示action bar</p>

<p>具体代码不再展示：）</p>

<h3>Use Nine-patch Bitmaps 使用点9图</h3>

<p>略：）</p>

<h2>2. Supporting Different Densities</h2>

<p>上一篇解决了怎样让布局适配屏幕的问题，本篇解决怎样让控件显示正确和让图片显示最佳的问题。</p>

<p>Android 提供两种方式支持不同的屏幕密度：<br/>
Use Density-independent Pixels<br/>
Provide Alternative Bitmaps</p>

<h3>Use Density-independent Pixels</h3>

<p>Android 设备屏幕有多种密度，在布局时要避免使用像素来定义尺寸，而应该使用 dp 或 sp。<br/>
dp 是密度无关单位，在 160dpi 屏幕下，1dp=1px；<br/>
sp 与 dp 类似，是缩放比例无关单位，用于文字。</p>

<h3>Provide Alternative Bitmaps</h3>

<p>不同密度对应不用的图片：<br/>
xhdpi: 2.0<br/>
hdpi: 1.5<br/>
mdpi: 1.0 (baseline)<br/>
ldpi: 0.75</p>

<h2>3. Implementing Adaptative UI Flows</h2>

<p>上两篇介绍了如何布局及配置图片资源，本篇介绍如何在代码里执行对应的界面流程。</p>

<p>Depending on the layout that your application is currently showing, the UI flow may be different. For example, if your application is in the dual-pane mode, clicking on an item on the left pane will simply display the content on the right pane; if it is in single-pane mode, the content should be displayed on its own (in a different activity).</p>

<p>根据设备屏幕的不同，Android 会调用对应的布局，同时也要求代码里执行与布局对应的界面流程。例如，如果此时应用是 dual-pane 模式布局，在左边点击 item 后，右边应该直接显示内容；如果是 single-pane 模式布局，内容应该通过打开另一个 activity 显示。</p>

<h3>Determine the Current Layout</h3>

<p>确定当前布局</p>

<p>Since your implementation of each layout will be a little different, one of the first things you will probably have to do is determine what layout the user is currently viewing. For example, you might want to know whether the user is in &ldquo;single pane&rdquo; mode or &ldquo;dual pane&rdquo; mode. You can do that by querying if a given view exists and is visible:</p>

<p>因为针对不同布局的具体实现会略有不同，所以你在处理界面之前应该首先确定当前使用的是哪个布局。例如，你需要知道当前是 dual-pane 还是 single-pane。你可以通过查询某个 view 是否存在来确定：
```
public class NewsReaderActivity extends FragmentActivity {</p>

<pre><code>boolean mIsDualPane;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main_layout);

    View articleView = findViewById(R.id.article);
    mIsDualPane = articleView != null &amp;&amp; 
                    articleView.getVisibility() == View.VISIBLE;
}
</code></pre>

<p>}
```
以上代码查询 article 是否存在，存在的话说明是 dual-pane 模式。这种方式比直接查询调用了哪个布局更灵活简单。</p>

<p>Another example of how you can adapt to the existence of different components is to check whether they are available before performing an operation on them. For example, in the News Reader sample app, there is a button that opens a menu, but that button only exists when running on versions older than Android 3.0 (because it&rsquo;s function is taken over by the ActionBar on API level 11+). So, to add the event listener for this button, you can do:</p>

<p>也可以在执行动作前检查 view 是否存在：
```
Button catButton = (Button) findViewById(R.id.categorybutton);
OnClickListener listener = /<em> create your listener here </em>/;
if (catButton != null) {</p>

<pre><code>catButton.setOnClickListener(listener);
</code></pre>

<p>}
```</p>

<h3>React According to Current Layout</h3>

<p>响应当前布局</p>

<p>Some actions may have a different result depending on the current layout. For example, in the News Reader sample, clicking on a headline from the headlines list opens the article in the right hand-side pane if the UI is in dual pane mode, but will launch a separate activity if the UI is in single-pane mode:</p>

<p>确定了当前布局后，就可以根据不同的布局做出不同的响应了：
```
@Override
public void onHeadlineSelected(int index) {</p>

<pre><code>mArtIndex = index;
if (mIsDualPane) {
    /* display article on the right pane */
    mArticleFragment.displayArticle(mCurrentCat.getArticle(index));
} else {
    /* start a separate activity */
    Intent intent = new Intent(this, ArticleActivity.class);
    intent.putExtra("catIndex", mCatIndex);
    intent.putExtra("artIndex", index);
    startActivity(intent);
}
</code></pre>

<p>}
```</p>

<h3>Reuse Fragments in Other Activities</h3>

<p>在其它 Activity 中重用 Fragment</p>

<p>A recurring pattern in designing for multiple screens is having a portion of your interface that&rsquo;s implemented as a pane on some screen configurations and as a separate activity on other configurations. For example, in the News Reader sample, the news article text is presented in the right side pane on large screens, but is a separate activity on smaller screens.</p>

<p>在支持多种屏幕的设计中有一种重用模式，就是把界面的一部分当做一个独立体，这个独立体在大屏幕中是一个 pane，在小屏幕中是一个 activity。这种模式可以使用 fragment 来实现。</p>

<p>例如，定义一个 ArticleFragment，大屏幕时用在 dual-pane 布局中：
```
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="fill_parent"
android:layout_height="fill_parent"
android:orientation="horizontal"&gt;
&lt;fragment android:id="@+id/headlines"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.HeadlinesFragment"
          android:layout_width="400dp"
          android:layout_marginRight="10dp"/&gt;
&lt;fragment android:id="@+id/article"
          android:layout_height="fill_parent"
          android:name="com.example.android.newsreader.ArticleFragment"
          android:layout_width="fill_parent" /&gt;
</code></pre>

<p></LinearLayout>
<code>
小屏幕时用在 ArticleActivity 中（无需再针对 activity 布局）：
</code>
ArticleFragment frag = new ArticleFragment();
getSupportFragmentManager().beginTransaction().add(android.R.id.content, frag).commit();
```
One very important point to keep in mind when designing your fragments is to not create a strong coupling to a specific activity. You can usually do that by defining an interface that abstracts all the ways in which the fragment needs to interact with its host activity, and then the host activity implements that interface:</p>

<p>在设计 fragment 时我们需要注意的一点是：不要为特定的 activity 创建强耦合的 fragment。你可以在 Fragment 里创建接口，通过接口和 activity 进行交互：
例如，HeadlinesFragment 这样设计：
```
public class HeadlinesFragment extends ListFragment {</p>

<pre><code>...
OnHeadlineSelectedListener mHeadlineSelectedListener = null;

/* Must be implemented by host activity */
public interface OnHeadlineSelectedListener {
    public void onHeadlineSelected(int index);
}
...

public void setOnHeadlineSelectedListener(OnHeadlineSelectedListener listener) {
    mHeadlineSelectedListener = listener;
}
</code></pre>

<p>}
```
activity 需要实现这个接口，这样，当用户点击左边 item 的时候，fragment 会通知 host activity 的 listener 进行操作，而 activity 在实现 listener 的 onHeadlineSelected 方法里面会进行当前布局的判断，从而选择合适的 UI（是显示在右边还是另起一个 activity）。下面是 fragment 响应点击事件，通知 activity 的 listener 进行实际操作的代码：</p>

<p>```
public class HeadlinesFragment extends ListFragment {</p>

<pre><code>...
@Override
public void onItemClick(AdapterView&lt;?&gt; parent, 
                        View view, int position, long id) {
    if (null != mHeadlineSelectedListener) {
        mHeadlineSelectedListener.onHeadlineSelected(position);
    }
}
...
</code></pre>

<p>}
```</p>

<h3>Handle Screen Configuration Changes</h3>

<p>略：）</p>
]]></content>
  </entry>
  
</feed>
