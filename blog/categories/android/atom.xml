<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Steven Chen]]></title>
  <link href="http://xuanxi.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://xuanxi.github.io/"/>
  <updated>2014-07-17T23:02:44+08:00</updated>
  <id>http://xuanxi.github.io/</id>
  <author>
    <name><![CDATA[Steven Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Designing for Multiple Screens]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/17/designing-for-multiple-screens/"/>
    <updated>2014-07-17T22:07:15+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/17/designing-for-multiple-screens</id>
    <content type="html"><![CDATA[<p>Android powers hundreds of device types with several different screen sizes, ranging from small phones to large TV sets. Therefore, it’s important that you design your application to be compatible with all screen sizes so it’s available to as many users as possible.<br/>
But being compatible with different device types is not enough. Each screen size offers different possibilities and challenges for user interaction, so in order to truly satisfy and impress your users, your application must go beyond merely supporting multiple screens: it must optimize the user experience for each screen configuration.</p>

<p>Android 设备的多样性要求应用的显示要适配多种屏幕尺寸，但仅仅让应用正常显示在多种屏幕上并不足够，因为不同尺寸的屏幕提供不同的交互能力，设计者应该做出适当优化以更好的利用屏幕。</p>

<p>本篇包含以下三部分：<br/>
1. Supporting Different Screen Sizes；<br/>
2. Supporting Different Screen Densities；<br/>
3. Implementing Adaptative UI Flows。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[置顶]Android官方文档阅读与笔记]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/16/guan-fang-wen-dang-yue-du-yu-zong-jie/"/>
    <updated>2014-07-16T23:33:22+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/16/guan-fang-wen-dang-yue-du-yu-zong-jie</id>
    <content type="html"><![CDATA[<p>理解官方指南是每一位 Android 工程师技术进阶的必经之路，可惜很多人（包括我）并没有真正重视起来。随着开发工作的深入，我决定开始认真研读，以下为所读文章的摘录、翻译和笔记，若有理解偏差的地方，欢迎大家批评指正。</p>

<h2>设计指南-Design</h2>

<p>也许有人会说 Design 只是设计师的工作，对此我并不反对，但我认为作为一位合格的 Android 工程师必须首先理解 Android Design，这样才能更好地配合设计师开发出实用美观的作品。</p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/13/android-design-principles/">Android Design Principles</a><br/>
Android 设计准则。每一个新的 Android 应用都应该尽量基于这些准则去设计。另外，平时使用各种应用的时候也应该关注其设计的好坏，结合Android 设计准则进行分析，逐渐加深自己对用户体验的理解。<br/>
参考 <a href="http://blog.xuanxi.me/blog/2014/07/15/ios-design-principles/">iOS Design Principles</a></p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/15/android-ui-framework/">Android UI Framework</a><br/>
理解 Android 的界面框架，让应用与 Android 的用户体验保持一致。<br/>
参考 <a href="http://blog.xuanxi.me/blog/2014/07/15/bars/">iOS UI Framework</a></p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/16/android-style/">Android Style</a><br/>
Android 视觉设计要点。</p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/16/android-patterns/">Android Patterns</a><br/>
Android 交互设计要点。</p>

<h2>开发指南-Develop</h2>

<p><a href="http://blog.xuanxi.me/blog/2014/07/17/designing-for-multiple-screens/">Designing for Multiple Screens</a><br/>
屏幕适配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Patterns]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/16/android-patterns/"/>
    <updated>2014-07-16T22:43:39+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/16/android-patterns</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Style]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/16/android-style/"/>
    <updated>2014-07-16T22:30:21+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/16/android-style</id>
    <content type="html"><![CDATA[<blockquote><p>Build visually compelling apps that look great on any device.<br/>
构建在任何设备上都引人注目的应用。</p></blockquote>

<p>本篇分为以下几大部分：<br/>
1. Devices and Displays：设备适配，是 Android 开发的重点；<br/>
2. Themes：官方界面主题，国内的应用开发很少会直接使用到；<br/>
3. Touch Feedback：<br/>
4. 。。。</p>

<h2>1. Devices and Displays</h2>

<p>Android powers hundreds of millions of phones, tablets, and other devices in a wide variety of screen sizes and form factors. By taking advantage of Android&rsquo;s flexible layout system, you can create apps that gracefully scale from large tablets to smaller phones.</p>

<p>Android 作为一个开放的平台，支持种类繁多的设备和屏幕尺寸，因此，解决设备适配的问题一直以来是应用开发中的重点工作。Android 提供了自适应布局的解决方案。</p>

<p><img src="/images/devices_displays_main.png" alt="devices_displays_main" /></p>

<h4>Be flexible 自适应</h4>

<p>Stretch and compress your layouts to accommodate various heights and widths.</p>

<p>Android 会根据不同的宽高值缩放布局。宽高值可以定义为 WRAP_CONTENT、MATCH_PARENT、FILL_PARENT（API8以下）、dp值、px值等。</p>

<h4>Optimize layouts 布局优化</h4>

<p>On larger devices, take advantage of extra screen real estate. Create compound views that combine multiple views to reveal more content and ease navigation.</p>

<h4>Assets for all 资源集</h4>

<p>Provide resources for different screen densities (DPI) to ensure that your app looks great on any device.</p>

<p>为了让应用在所有屏幕上以最佳质量显示，需要根据不同密度屏幕提供不同尺规格的资源。目前主流手机的屏幕密度在320DPI（视网膜）左右的范围。</p>

<p><img src="/images/devices_displays_density@2x.png" alt="devices_displays_density@2x" /></p>

<h4>Strategies 适配策略</h4>

<p>So where do you begin when designing for multiple screens? One approach is to work in the base standard (normal size and MDPI) and scale it up or down for the other buckets. Another approach is to start with the device with the largest screen size, and then scale down and figure out the UI compromises you&rsquo;ll need to make on smaller screens.</p>

<p>有两种方式开始屏幕适配工作：<br/>
1. 从MDPI开始；<br/>
2. 从最大的屏幕开始。<br/>
我认为挑选一个主流或偏高的屏幕开始较好，能够保证多数用户的体验。</p>

<p>For details about designing layouts for larger screens, see the <a href="http://developer.android.com/design/patterns/multi-pane-layouts.html">Multi-pane Layouts</a> guide.</p>

<p>Developer Guide<br/>
For information about how to build flexible layouts for multiple screen sizes and densities, read <a href="http://blog.xuanxi.me/blog/2014/07/17/designing-for-multiple-screens/">Designing for Multiple Screens</a> and Building a Dynamic UI with Fragments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android UI Framework]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/15/android-ui-framework/"/>
    <updated>2014-07-15T21:21:41+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/15/android-ui-framework</id>
    <content type="html"><![CDATA[<p>参考原文：<br/>
<a href="http://developer.android.com/design/handhelds/index.html">http://developer.android.com/design/handhelds/index.html</a></p>

<p>本文针对的是手机和平板的界面，其它设备可以看原文：<br/>
1. 可穿戴设备 <a href="http://developer.android.com/design/wear/index.html">Wear</a>;<br/>
2. 电视 <a href="http://developer.android.com/design/tv/index.html">TV</a>;<br/>
3. 汽车 <a href="http://developer.android.com/design/auto/index.html">Auto</a>.</p>

<p>Android 界面框架主要分为四大部分：<br/>
1. 与应用集合相关的 Home、All Apps、and Recents；<br/>
2. 系统栏，包括 Status Bar 和 Navigation Bar；<br/>
3. 通知 Notifications；<br/>
4. 应用自身框架，包括 Action Bar、Navigation Drawer 和 Content Area。</p>

<h2>Home, All Apps, and Recents</h2>

<h3>Home screen</h3>

<p>Home is a customizable space that houses app shortcuts, folders and widgets. Navigate between different home screen panels by swiping left and right.<br/>
The Favorites Tray at the bottom always keeps your most important shortcuts and folders in view regardless of which panel is currently showing.<br/>
Access the entire collection of apps and widgets by touching the All Apps button at the center of the Favorites Tray.</p>

<p>Home 作为 Android 系统的主界面，用来放置应用快捷方式、文件夹和 Widgets（窗口部件），通过左右滑动来切换多个 Home 页面。<br/>
Home 的底部是一个特殊的托盘，固定放置最常用的应用快捷方式或文件夹。托盘中间的按钮可以打开全部应用列表。</p>

<p><img src="/images/ui_overview_home_screen.png" alt="ui_overview_home_screen" /></p>

<h3>All apps screen</h3>

<p>The All Apps screen lets you browse the entire set of apps and widgets that are installed on your device.<br/>
Users can drag an app or widget icon from the All Apps screen and place it in any empty location on any Home screen.</p>

<p><img src="/images/ui_overview_all_apps.png" alt="ui_overview_all_apps" /></p>

<h3>Recents screen</h3>

<p>Recents provides an efficient way of switching between recently used applications. It provides a clear navigation path between multiple ongoing tasks.<br/>
The Recents button at the right side of the navigation bar displays the apps that the user has interacted with most recently. They are organized in reverse chronological order with the most recently used app at the bottom.<br/>
Switch to an app by touching it. Remove an item by swiping left or right.</p>

<p><img src="/images/ui_overview_recents.png" alt="ui_overview_recents" /></p>

<h2>System Bars</h2>

<p>System Bars 包含 Status Bar 和 Navigation Bar 两部分。</p>

<p><img src="/images/ui_overview_system_ui.png" alt="ui_overview_system_ui" /></p>

<h4>1. Status Bar</h4>

<p>Displays pending notifications on the left and status, such as time, battery level, or signal strength, on the right. Swipe down from the status bar to show notification details.</p>

<p>Status Bar 用来展示通知信息和设备信息。下拉展示通知详情。</p>

<h4>2. Navigation Bar</h4>

<p>New for phones in Android 4.0, the navigation bar is present only on devices that don&rsquo;t have the traditional hardware keys. It houses the device navigation controls Back, Home, and Recents, and also displays a menu for apps written for Android 2.3 or earlier.</p>

<p>Navigation Bar 出现在4.0之后的版本，用来取代设备的物理按钮，同时提供菜单按钮以兼容2.3及以下的版本。<br/>
从目前市面上的设备来看，大多依然具备物理导航键如三星，有的就虚拟导航和物理按键相结合如魅族MX2。</p>

<h2>Notifications</h2>

<p>Notifications are brief messages that users can access at any time from the status bar. They provide updates, reminders, or information that&rsquo;s important, but not critical enough to warrant interrupting the user. Open the notifications drawer by swiping down on the status bar. Touching a notification opens the associated app.</p>

<p>通知用于随时提醒用户一些简单而重要信息并且不会打断当前的用户操作。点击一个通知应该进入相关的应用。</p>

<p>Notifications can be expanded to uncover more details and relevant actions. When collapsed, notifications have a one-line title and a one-line message.The recommended layout for a notification includes two lines. If necessary, you can add a third line.</p>

<p>典型的通知布局包含一行标题和一行消息。需要的话也可以加入第三行。</p>

<p><img src="/images/ui_overview_notifications.png" alt="ui_overview_notifications" /></p>

<p>Swiping a notification right or left removes it from the notification drawer.</p>

<p><img src="/images/notifications_dismiss.png" alt="notifications_dismiss" /></p>

<h2>Common App UI</h2>

<p>A typical Android app uses action bars, and many apps will include a navigation drawer.</p>

<p>一个典型的 Android 应用包含 Action Bar 和 Content Area 两部分。如果应用的结构较复杂，可以使用 Navigation Drawer 来切换主要页面。</p>

<p><img src="/images/app_structure_drawer.png" alt="app_structure_drawer" /></p>

<h4>Action Bar</h4>

<p>The command and control center for your app. The action bar surfaces the most important actions for the current view, and may include simple controls for switching between views.</p>

<p>Action Bar 用来承载与当前页面相关的主要操作，也可用于页面的切换。</p>

<h4>Navigation Drawer</h4>

<p>If your app&rsquo;s structure is more complex, the navigation drawer can display the main navigation options. The navigation drawer expands from the left edge of the screen, overlaying the content area but not the action bar.</p>

<p>Navigation Drawer 的弹出不覆盖 Action Bar，展示方式与目前流行在iOS应用中的侧边栏有所不同。</p>

<h4>Content Area</h4>

<p>The space where the content of your app is displayed.</p>
]]></content>
  </entry>
  
</feed>
