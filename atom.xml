<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Chen]]></title>
  <link href="http://xuanxi.github.io/atom.xml" rel="self"/>
  <link href="http://xuanxi.github.io/"/>
  <updated>2014-07-23T23:26:20+08:00</updated>
  <id>http://xuanxi.github.io/</id>
  <author>
    <name><![CDATA[Steven Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[置顶]Android文章归类]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/23/zhi-ding-androidwen-zhang-gui-lei/"/>
    <updated>2014-07-23T00:21:05+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/23/zhi-ding-androidwen-zhang-gui-lei</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[置顶]Android官方文档阅读笔记]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/17/guan-fang-wen-dang-yue-du-yu-zong-jie/"/>
    <updated>2014-07-17T23:33:22+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/17/guan-fang-wen-dang-yue-du-yu-zong-jie</id>
    <content type="html"><![CDATA[<p>理解官方指南是每一位 Android 工程师技术进阶的必经之路，可惜很多人（包括我）并没有真正重视起来。随着开发工作的深入，我决定开始认真研读，以下为所读文章的摘录、翻译和笔记，若有理解偏差的地方，欢迎大家批评指正。</p>

<h2>设计指南-Design</h2>

<p>也许有人会说 Design 只是设计师的工作，对此我并不反对，但我认为作为一位合格的 Android 工程师必须首先理解 Android Design，这样才能更好地配合设计师开发出实用美观的作品。</p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/13/android-design-principles/">Android Design Principles</a><br/>
Android 设计准则。每一个新的 Android 应用都应该尽量基于这些准则去设计。另外，平时使用各种应用的时候也应该关注其设计的好坏，结合Android 设计准则进行分析，逐渐加深自己对用户体验的理解。<br/>
参考 <a href="http://blog.xuanxi.me/blog/2014/07/15/ios-design-principles/">iOS Design Principles</a></p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/15/android-ui-framework/">Android UI Framework</a><br/>
理解 Android 的界面框架，让应用与 Android 的用户体验保持一致。<br/>
参考 <a href="http://blog.xuanxi.me/blog/2014/07/15/bars/">iOS UI Framework</a></p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/16/android-style/">Android Style</a><br/>
Android 视觉设计要点。</p>

<p><a href="http://blog.xuanxi.me/blog/2014/07/16/android-patterns/">Android Patterns</a><br/>
Android 交互设计要点。</p>

<h2>开发指南-Develop</h2>

<p><a href="http://blog.xuanxi.me/blog/2014/07/17/designing-for-multiple-screens/">Designing for Multiple Screens</a><br/>
屏幕适配。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing for Multiple Screens]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/17/designing-for-multiple-screens/"/>
    <updated>2014-07-17T22:07:15+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/17/designing-for-multiple-screens</id>
    <content type="html"><![CDATA[<p>原文：<br/>
<a href="http://developer.android.com/training/multiscreen/index.html">http://developer.android.com/training/multiscreen/index.html</a></p>

<p>Android powers hundreds of device types with several different screen sizes, ranging from small phones to large TV sets. Therefore, it’s important that you design your application to be compatible with all screen sizes so it’s available to as many users as possible.<br/>
But being compatible with different device types is not enough. Each screen size offers different possibilities and challenges for user interaction, so in order to truly satisfy and impress your users, your application must go beyond merely supporting multiple screens: it must optimize the user experience for each screen configuration.</p>

<p>Android 设备的多样性要求应用的显示要适配多种屏幕尺寸，但仅仅让应用正常显示在多种屏幕上并不足够，因为不同尺寸的屏幕提供不同的交互能力，设计者应该做出适当优化以更好的利用屏幕。</p>

<p>本篇包含以下三部分：<br/>
1. Supporting Different Screen Sizes；<br/>
2. Supporting Different Screen Densities；<br/>
3. Implementing Adaptative UI Flows。</p>

<p>推荐文章：<br/>
<a href="http://stormzhang.github.io/android/2014/05/16/android-screen-adaptation/">Android 屏幕适配</a></p>

<h2>1. Supporting Different Screen Sizes</h2>

<p>本篇将告诉你如何让你的应用程序支持各种不同屏幕大小，主要通过以下几种办法：<br/>
让你的布局能充分的自适应屏幕<br/>
根据屏幕的配置来加载合适的UI布局<br/>
确保正确的布局应用在正确的设备屏幕上<br/>
提供可以根据屏幕大小自动伸缩的图片</p>

<h3>Use &ldquo;wrap_content&rdquo; and &ldquo;match_parent&rdquo;</h3>

<p>To ensure that your layout is flexible and adapts to different screen sizes, you should use &ldquo;wrap_content&rdquo; and &ldquo;match_parent&rdquo; for the width and height of some view components.</p>

<p>使用 wrap_content 和 match_parent 可以确保布局自适应到不同的屏幕。</p>

<p><img src="http://xuanxi.github.io/images/layout-hvga.png" alt="layout-hvga" /><br/>
上图中的横竖两种状态时是自动适配屏幕的。</p>

<h3>Use RelativeLayout</h3>

<p>You can construct fairly complex layouts using nested instances of LinearLayout and combinations of &ldquo;wrap_content&rdquo; and &ldquo;match_parent&rdquo; sizes. However, LinearLayout does not allow you to precisely control the spacial relationships of child views; views in a LinearLayout simply line up side-by-side. If you need child views to be oriented in variations other than a straight line, a better solution is often to use a RelativeLayout, which allows you to specify your layout in terms of the spacial relationships between components. For instance, you can align one child view on the left side and another view on the right side of the screen.</p>

<p>LinearLayout 用于简单的线性布局，而 RelativeLayout 提供了更灵活的手段去布置子控件。</p>

<p><img src="http://xuanxi.github.io/images/relativelayout1.png" alt="relativelayout1" /></p>

<h3>Use Size Qualifiers 使用size限定符</h3>

<p>While those layouts adapt to different screens by stretching the space within and around components, they may not provide the best user experience for each screen size. Therefore, your application should not only implement flexible layouts, but should also provide several alternative layouts to target different screen configurations.</p>

<p>一种布局自适应所有屏幕并不代表提供了最好的用户体验，还要考虑为不同大小的屏幕建立不同的布局，以充分发挥不同尺寸屏幕的各自的优势。</p>

<p>For example, many applications implement the &ldquo;two pane&rdquo; pattern for large screens (the app might show a list of items on one pane and the content on another pane). Tablets and TVs are large enough for both panes to fit simultaneously on screen, but phone screens have to show them separately. So, to implement these layouts, you could have the following files:</p>

<p>举个例子，很多应用都会有两个功能窗口，一个是列表，一个是列表项详情，对于平板或电视的大屏幕，一次就可以展示这两个窗口，而手机屏幕只能展示一个。以下示例使用了一个 layout 布局和一个 layout-large 布局，应用在运行时会根据屏幕大小读取对应的布局：</p>

<p>res/layout/main.xml, single-pane (default) layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>res/layout-large/main.xml, two-pane layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Use the Smallest-width Qualifier 使用最小宽度限定符</h3>

<p>One of the difficulties developers had in pre-3.2 Android devices was the &ldquo;large&rdquo; screen size bin, which encompasses the Dell Streak, the original Galaxy Tab, and 7&#8221; tablets in general. However, many applications may want to show different layouts for different devices in this category (such as for 5&#8221; and 7&#8221; devices), even though they are all considered to be &ldquo;large&rdquo; screens. That&rsquo;s why Android introduced the &ldquo;Smallest-width&rdquo; qualifier (amongst others) in Android 3.2.</p>

<p>在 3.2 版本系统之前，使用 Size 限定符有一个问题会让很多程序员感到头疼，large 到底是指多大呢？很多时候5寸和7寸都被当做 large，但很多应用都希望能够更自由地为不同屏幕设备加载不同的布局，不管它们是不是被系统认定为&#8221;large&#8221;。这就是Android为什么在3.2以后引入了&#8221;Smallest-width&#8221;限定符。</p>

<p>The Smallest-width qualifier allows you to target screens that have a certain minimum width given in dp. For example, the typical 7&#8221; tablet has a minimum width of 600 dp, so if you want your UI to have two panes on those screens (but a single list on smaller screens), you can use the same two layouts from the previous section for single and two-pane layouts, but instead of the large size qualifier, use sw600dp to indicate the two-pane layout is for screens on which the smallest-width is 600 dp:</p>

<p>Smallest-width 限定符允许你设定一个具体的最小值(以dp为单位)来指定屏幕。例如，7寸的平板最小宽度是600dp，所以如果你想让你的UI在这种屏幕上显示 two pane，在更小的屏幕上显示 single pane，你可以使用sw600dp来表示你想在600dp以上宽度的屏幕上使用 two pane 模式：</p>

<p>res/layout/main.xml, single-pane (default) layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:orientation="vertical"
</span><span class='line'>    android:layout_width="match_parent"
</span><span class='line'>    android:layout_height="match_parent"&gt;
</span><span class='line'>
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="match_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>res/layout-sw600dp/main.xml, two-pane layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>This means that devices whose smallest width is greater than or equal to 600dp will select the layout-sw600dp/main.xml (two-pane) layout, while smaller screens will select the layout/main.xml (single-pane) layout.</p>

<p>这意味着，那些最小屏幕宽度大于600dp的设备会选择 layout-sw600dp/main.xml(two-pane)布局，而更小屏幕的设备将会选择 layout/main.xml(single-pane)布局。</p>

<p>However, this won&rsquo;t work well on pre-3.2 devices, because they don&rsquo;t recognize sw600dp as a size qualifier, so you still have to use the large qualifier as well. So, you should have a file named res/layout-large/main.xml which is identical to res/layout-sw600dp/main.xml. In the next section you&rsquo;ll see a technique that allows you to avoid duplicating the layout files this way.</p>

<p>可是，3.2系统之前不支持 Smallest-width 限定符，你仍然需要 large 限定符去兼容那些老系统，即需要同时存在 layout-sw600dp 和 layout-large，并且里面的布局文件是一样的。可是，这样就造成重复定义布局的问题，下一节会介绍一种避免重复布局的技术。</p>

<h3>Use Layout Aliases 布局别名</h3>

<p>The smallest-width qualifier is available only on Android 3.2 and above. Therefore, you should also still use the abstract size bins (small, normal, large and xlarge) to be compatible with earlier versions. For example, if you want to design your UI so that it shows a single-pane UI on phones but a multi-pane UI on 7&#8221; tablets, TVs and other large devices, you&rsquo;d have to supply these files:<br/>
&hellip;</p>

<p>Smallest-width 限定符仅在 Android 3.2及之后的系统中有效。所以，你需要同时使用 Size 限定符(small, normal, large 和 xlarge)来兼容更早的系统。例如，你想手机上显示 single-pane 界面，而在7寸平板和更大屏的设备上显示 multi-pane 界面，你需要提供以下文件：<br/>
res/layout/main.xml: single-pane 布局<br/>
res/layout-large/main.xml: multi-pane 布局<br/>
res/layout-sw600dp/main.xml: multi-pane 布局</p>

<p>The last two files are identical, because one of them will be matched by Android 3.2 devices, and the other one is for the benefit of tablets and TVs with earlier versions of Android.</p>

<p>最后的两个文件是完全相同的，一个用于3.2及以上系统，一个用于3.2以下系统。</p>

<p>To avoid this duplication of the same file for tablets and TVs (and the maintenance headache resulting from it), you can use alias files. For example, you can define the following layouts:<br/>
&hellip;</p>

<p>使用别名来避免重复。例如，可以定义以下布局：<br/>
res/layout/main.xml, single-pane layout<br/>
res/layout/main_twopanes.xml, two-pane layout</p>

<p>加入以下两个 values 文件：</p>

<p>res/values-large/layout.xml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<p>res/values-sw600dp/layout.xml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;resources&gt;
</span><span class='line'>    &lt;item name="main" type="layout"&gt;@layout/main_twopanes&lt;/item&gt;
</span><span class='line'>&lt;/resources&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Use Orientation Qualifiers 使用方向限定符</h3>

<p>Some layouts work well in both landscape and portrait orientations, but most of them can benefit from adjustments. In the News Reader sample app, here is how the layout behaves in each screen size and orientation:<br/>
&hellip;</p>

<p>有些布局在横竖屏时都显示正常，但大多数情况下可以做调整以显示更好。例如，在 News Reader 示例程序中，布局在不同屏幕尺寸和不同屏幕方向中是这样显示的：<br/>
小屏幕, 竖屏: 单面板, 显示logo<br/>
小屏幕, 横屏: 单面板, 显示logo<br/>
7寸平板, 竖屏: 单面板, 显示action bar<br/>
7寸平板, 横屏: 双面板, 宽, 显示action bar<br/>
10寸平板, 竖屏: 双面板, 窄, 显示action bar<br/>
10寸平板, 横屏: 双面板, 宽, 显示action bar<br/>
电视, 横屏: 双面板, 宽, 显示action bar</p>

<p>具体代码不再展示：）</p>

<h3>Use Nine-patch Bitmaps 使用点9图</h3>

<p>略：）</p>

<h2>2. Supporting Different Densities</h2>

<p>上一篇解决了怎样让布局适配屏幕的问题，本篇解决怎样让控件显示正确和让图片显示最佳的问题。</p>

<p>Android 提供两种方式支持不同的屏幕密度：<br/>
Use Density-independent Pixels<br/>
Provide Alternative Bitmaps</p>

<h3>Use Density-independent Pixels</h3>

<p>Android 设备屏幕有多种密度，在布局时要避免使用像素来定义尺寸，而应该使用 dp 或 sp。<br/>
dp 是密度无关单位，在 160dpi 屏幕下，1dp=1px；<br/>
sp 与 dp 类似，是缩放比例无关单位，用于文字。</p>

<h3>Provide Alternative Bitmaps</h3>

<p>不同密度对应不用的图片：<br/>
xhdpi: 2.0<br/>
hdpi: 1.5<br/>
mdpi: 1.0 (baseline)<br/>
ldpi: 0.75</p>

<h2>3. Implementing Adaptative UI Flows</h2>

<p>上两篇介绍了如何布局及配置图片资源，本篇介绍如何在代码里执行对应的界面流程。</p>

<p>Depending on the layout that your application is currently showing, the UI flow may be different. For example, if your application is in the dual-pane mode, clicking on an item on the left pane will simply display the content on the right pane; if it is in single-pane mode, the content should be displayed on its own (in a different activity).</p>

<p>根据设备屏幕的不同，Android 会调用对应的布局，同时也要求代码里执行与布局对应的界面流程。例如，如果此时应用是 dual-pane 模式布局，在左边点击 item 后，右边应该直接显示内容；如果是 single-pane 模式布局，内容应该通过打开另一个 activity 显示。</p>

<h3>Determine the Current Layout</h3>

<p>确定当前布局</p>

<p>Since your implementation of each layout will be a little different, one of the first things you will probably have to do is determine what layout the user is currently viewing. For example, you might want to know whether the user is in &ldquo;single pane&rdquo; mode or &ldquo;dual pane&rdquo; mode. You can do that by querying if a given view exists and is visible:</p>

<p>因为针对不同布局的具体实现会略有不同，所以你在处理界面之前应该首先确定当前使用的是哪个布局。例如，你需要知道当前是 dual-pane 还是 single-pane。你可以通过查询某个 view 是否存在来确定：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class NewsReaderActivity extends FragmentActivity {
</span><span class='line'>    boolean mIsDualPane;
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void onCreate(Bundle savedInstanceState) {
</span><span class='line'>        super.onCreate(savedInstanceState);
</span><span class='line'>        setContentView(R.layout.main_layout);
</span><span class='line'>
</span><span class='line'>        View articleView = findViewById(R.id.article);
</span><span class='line'>        mIsDualPane = articleView != null && 
</span><span class='line'>                        articleView.getVisibility() == View.VISIBLE;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上代码查询 article 是否存在，存在的话说明是 dual-pane 模式。这种方式比直接查询调用了哪个布局更灵活简单。</p>

<p>Another example of how you can adapt to the existence of different components is to check whether they are available before performing an operation on them. For example, in the News Reader sample app, there is a button that opens a menu, but that button only exists when running on versions older than Android 3.0 (because it&rsquo;s function is taken over by the ActionBar on API level 11+). So, to add the event listener for this button, you can do:</p>

<p>也可以在执行动作前检查 view 是否存在：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Button catButton = (Button) findViewById(R.id.categorybutton);
</span><span class='line'>OnClickListener listener = /* create your listener here */;
</span><span class='line'>if (catButton != null) {
</span><span class='line'>    catButton.setOnClickListener(listener);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>React According to Current Layout</h3>

<p>响应当前布局</p>

<p>Some actions may have a different result depending on the current layout. For example, in the News Reader sample, clicking on a headline from the headlines list opens the article in the right hand-side pane if the UI is in dual pane mode, but will launch a separate activity if the UI is in single-pane mode:</p>

<p>确定了当前布局后，就可以根据不同的布局做出不同的响应了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>public void onHeadlineSelected(int index) {
</span><span class='line'>    mArtIndex = index;
</span><span class='line'>    if (mIsDualPane) {
</span><span class='line'>        /* display article on the right pane */
</span><span class='line'>        mArticleFragment.displayArticle(mCurrentCat.getArticle(index));
</span><span class='line'>    } else {
</span><span class='line'>        /* start a separate activity */
</span><span class='line'>        Intent intent = new Intent(this, ArticleActivity.class);
</span><span class='line'>        intent.putExtra("catIndex", mCatIndex);
</span><span class='line'>        intent.putExtra("artIndex", index);
</span><span class='line'>        startActivity(intent);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Reuse Fragments in Other Activities</h3>

<p>在其它 Activity 中重用 Fragment</p>

<p>A recurring pattern in designing for multiple screens is having a portion of your interface that&rsquo;s implemented as a pane on some screen configurations and as a separate activity on other configurations. For example, in the News Reader sample, the news article text is presented in the right side pane on large screens, but is a separate activity on smaller screens.</p>

<p>在支持多种屏幕的设计中有一种重用模式，就是把界面的一部分当做一个独立体，这个独立体在大屏幕中是一个 pane，在小屏幕中是一个 activity。这种模式可以使用 fragment 来实现。</p>

<p>例如，定义一个 ArticleFragment，大屏幕时用在 dual-pane 布局中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:layout_width="fill_parent"
</span><span class='line'>    android:layout_height="fill_parent"
</span><span class='line'>    android:orientation="horizontal"&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/headlines"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.HeadlinesFragment"
</span><span class='line'>              android:layout_width="400dp"
</span><span class='line'>              android:layout_marginRight="10dp"/&gt;
</span><span class='line'>    &lt;fragment android:id="@+id/article"
</span><span class='line'>              android:layout_height="fill_parent"
</span><span class='line'>              android:name="com.example.android.newsreader.ArticleFragment"
</span><span class='line'>              android:layout_width="fill_parent" /&gt;
</span><span class='line'>&lt;/LinearLayout&gt;</span></code></pre></td></tr></table></div></figure>


<p>小屏幕时用在 ArticleActivity 中（无需再针对 activity 布局）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ArticleFragment frag = new ArticleFragment();
</span><span class='line'>getSupportFragmentManager().beginTransaction().add(android.R.id.content, frag).commit();</span></code></pre></td></tr></table></div></figure>


<p>One very important point to keep in mind when designing your fragments is to not create a strong coupling to a specific activity. You can usually do that by defining an interface that abstracts all the ways in which the fragment needs to interact with its host activity, and then the host activity implements that interface:</p>

<p>在设计 fragment 时我们需要注意的一点是：不要为特定的 activity 创建强耦合的 fragment。你可以在 Fragment 里创建接口，通过接口和 activity 进行交互：
例如，HeadlinesFragment 这样设计：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class HeadlinesFragment extends ListFragment {
</span><span class='line'>    ...
</span><span class='line'>    OnHeadlineSelectedListener mHeadlineSelectedListener = null;
</span><span class='line'>
</span><span class='line'>    /* Must be implemented by host activity */
</span><span class='line'>    public interface OnHeadlineSelectedListener {
</span><span class='line'>        public void onHeadlineSelected(int index);
</span><span class='line'>    }
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>    public void setOnHeadlineSelectedListener(OnHeadlineSelectedListener listener) {
</span><span class='line'>        mHeadlineSelectedListener = listener;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>activity 需要实现这个接口，这样，当用户点击左边 item 的时候，fragment 会通知 host activity 的 listener 进行操作，而 activity 在实现 listener 的 onHeadlineSelected 方法里面会进行当前布局的判断，从而选择合适的 UI（是显示在右边还是另起一个 activity）。下面是 fragment 响应点击事件，通知 activity 的 listener 进行实际操作的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class HeadlinesFragment extends ListFragment {
</span><span class='line'>    ...
</span><span class='line'>    @Override
</span><span class='line'>    public void onItemClick(AdapterView&lt;?&gt; parent, 
</span><span class='line'>                            View view, int position, long id) {
</span><span class='line'>        if (null != mHeadlineSelectedListener) {
</span><span class='line'>            mHeadlineSelectedListener.onHeadlineSelected(position);
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Handle Screen Configuration Changes</h3>

<p>略：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Patterns]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/16/android-patterns/"/>
    <updated>2014-07-16T22:43:39+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/16/android-patterns</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Style]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/16/android-style/"/>
    <updated>2014-07-16T22:30:21+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/16/android-style</id>
    <content type="html"><![CDATA[<blockquote><p>Build visually compelling apps that look great on any device.<br/>
构建在任何设备上都引人注目的应用。</p></blockquote>

<p>本篇分为以下几大部分：<br/>
1. Devices and Displays：设备适配，是 Android 开发的重点；<br/>
2. Themes：官方界面主题，国内的应用开发很少会直接使用到；<br/>
3. Touch Feedback：<br/>
4. 。。。</p>

<h2>1. Devices and Displays</h2>

<p>Android powers hundreds of millions of phones, tablets, and other devices in a wide variety of screen sizes and form factors. By taking advantage of Android&rsquo;s flexible layout system, you can create apps that gracefully scale from large tablets to smaller phones.</p>

<p>Android 作为一个开放的平台，支持种类繁多的设备和屏幕尺寸，因此，解决设备适配的问题一直以来是应用开发中的重点工作。Android 提供了自适应布局的解决方案。</p>

<p><img src="http://xuanxi.github.io/images/devices_displays_main.png" alt="devices_displays_main" /></p>

<h4>Be flexible 自适应</h4>

<p>Stretch and compress your layouts to accommodate various heights and widths.</p>

<p>Android 会根据不同的宽高值缩放布局。宽高值可以定义为 WRAP_CONTENT、MATCH_PARENT、FILL_PARENT（API8以下）、dp值、px值等。</p>

<h4>Optimize layouts 布局优化</h4>

<p>On larger devices, take advantage of extra screen real estate. Create compound views that combine multiple views to reveal more content and ease navigation.</p>

<h4>Assets for all 资源集</h4>

<p>Provide resources for different screen densities (DPI) to ensure that your app looks great on any device.</p>

<p>为了让应用在所有屏幕上以最佳质量显示，需要根据不同密度屏幕提供不同尺规格的资源。目前主流手机的屏幕密度在320DPI（视网膜）左右的范围。</p>

<p><img src="http://xuanxi.github.io/images/devices_displays_density@2x.png" alt="devices_displays_density@2x" /></p>

<h4>Strategies 适配策略</h4>

<p>So where do you begin when designing for multiple screens? One approach is to work in the base standard (normal size and MDPI) and scale it up or down for the other buckets. Another approach is to start with the device with the largest screen size, and then scale down and figure out the UI compromises you&rsquo;ll need to make on smaller screens.</p>

<p>有两种方式开始屏幕适配工作：<br/>
1. 从MDPI开始；<br/>
2. 从最大的屏幕开始。<br/>
我认为挑选一个主流或偏高的屏幕开始较好，能够保证多数用户的体验。</p>

<p>For details about designing layouts for larger screens, see the <a href="http://developer.android.com/design/patterns/multi-pane-layouts.html">Multi-pane Layouts</a> guide.</p>

<p>Developer Guide<br/>
For information about how to build flexible layouts for multiple screen sizes and densities, read <a href="http://blog.xuanxi.me/blog/2014/07/17/designing-for-multiple-screens/">Designing for Multiple Screens</a> and Building a Dynamic UI with Fragments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android UI Framework]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/15/android-ui-framework/"/>
    <updated>2014-07-15T21:21:41+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/15/android-ui-framework</id>
    <content type="html"><![CDATA[<p>参考原文：<br/>
<a href="http://developer.android.com/design/handhelds/index.html">http://developer.android.com/design/handhelds/index.html</a></p>

<p>本文针对的是手机和平板的界面，其它设备可以看原文：<br/>
1. 可穿戴设备 <a href="http://developer.android.com/design/wear/index.html">Wear</a>;<br/>
2. 电视 <a href="http://developer.android.com/design/tv/index.html">TV</a>;<br/>
3. 汽车 <a href="http://developer.android.com/design/auto/index.html">Auto</a>.</p>

<p>Android 界面框架主要分为四大部分：<br/>
1. 与应用集合相关的 Home、All Apps、and Recents；<br/>
2. 系统栏，包括 Status Bar 和 Navigation Bar；<br/>
3. 通知 Notifications；<br/>
4. 应用自身框架，包括 Action Bar、Navigation Drawer 和 Content Area。</p>

<h2>Home, All Apps, and Recents</h2>

<h3>Home screen</h3>

<p>Home is a customizable space that houses app shortcuts, folders and widgets. Navigate between different home screen panels by swiping left and right.<br/>
The Favorites Tray at the bottom always keeps your most important shortcuts and folders in view regardless of which panel is currently showing.<br/>
Access the entire collection of apps and widgets by touching the All Apps button at the center of the Favorites Tray.</p>

<p>Home 作为 Android 系统的主界面，用来放置应用快捷方式、文件夹和 Widgets（窗口部件），通过左右滑动来切换多个 Home 页面。<br/>
Home 的底部是一个特殊的托盘，固定放置最常用的应用快捷方式或文件夹。托盘中间的按钮可以打开全部应用列表。</p>

<p><img src="http://xuanxi.github.io/images/ui_overview_home_screen.png" alt="ui_overview_home_screen" /></p>

<h3>All apps screen</h3>

<p>The All Apps screen lets you browse the entire set of apps and widgets that are installed on your device.<br/>
Users can drag an app or widget icon from the All Apps screen and place it in any empty location on any Home screen.</p>

<p><img src="http://xuanxi.github.io/images/ui_overview_all_apps.png" alt="ui_overview_all_apps" /></p>

<h3>Recents screen</h3>

<p>Recents provides an efficient way of switching between recently used applications. It provides a clear navigation path between multiple ongoing tasks.<br/>
The Recents button at the right side of the navigation bar displays the apps that the user has interacted with most recently. They are organized in reverse chronological order with the most recently used app at the bottom.<br/>
Switch to an app by touching it. Remove an item by swiping left or right.</p>

<p><img src="http://xuanxi.github.io/images/ui_overview_recents.png" alt="ui_overview_recents" /></p>

<h2>System Bars</h2>

<p>System Bars 包含 Status Bar 和 Navigation Bar 两部分。</p>

<p><img src="http://xuanxi.github.io/images/ui_overview_system_ui.png" alt="ui_overview_system_ui" /></p>

<h4>1. Status Bar</h4>

<p>Displays pending notifications on the left and status, such as time, battery level, or signal strength, on the right. Swipe down from the status bar to show notification details.</p>

<p>Status Bar 用来展示通知信息和设备信息。下拉展示通知详情。</p>

<h4>2. Navigation Bar</h4>

<p>New for phones in Android 4.0, the navigation bar is present only on devices that don&rsquo;t have the traditional hardware keys. It houses the device navigation controls Back, Home, and Recents, and also displays a menu for apps written for Android 2.3 or earlier.</p>

<p>Navigation Bar 出现在4.0之后的版本，用来取代设备的物理按钮，同时提供菜单按钮以兼容2.3及以下的版本。<br/>
从目前市面上的设备来看，大多依然具备物理导航键如三星，有的就虚拟导航和物理按键相结合如魅族MX2。</p>

<h2>Notifications</h2>

<p>Notifications are brief messages that users can access at any time from the status bar. They provide updates, reminders, or information that&rsquo;s important, but not critical enough to warrant interrupting the user. Open the notifications drawer by swiping down on the status bar. Touching a notification opens the associated app.</p>

<p>通知用于随时提醒用户一些简单而重要信息并且不会打断当前的用户操作。点击一个通知应该进入相关的应用。</p>

<p>Notifications can be expanded to uncover more details and relevant actions. When collapsed, notifications have a one-line title and a one-line message.The recommended layout for a notification includes two lines. If necessary, you can add a third line.</p>

<p>典型的通知布局包含一行标题和一行消息。需要的话也可以加入第三行。</p>

<p><img src="http://xuanxi.github.io/images/ui_overview_notifications.png" alt="ui_overview_notifications" /></p>

<p>Swiping a notification right or left removes it from the notification drawer.</p>

<p><img src="http://xuanxi.github.io/images/notifications_dismiss.png" alt="notifications_dismiss" /></p>

<h2>Common App UI</h2>

<p>A typical Android app uses action bars, and many apps will include a navigation drawer.</p>

<p>一个典型的 Android 应用包含 Action Bar 和 Content Area 两部分。如果应用的结构较复杂，可以使用 Navigation Drawer 来切换主要页面。</p>

<p><img src="http://xuanxi.github.io/images/app_structure_drawer.png" alt="app_structure_drawer" /></p>

<h4>Action Bar</h4>

<p>The command and control center for your app. The action bar surfaces the most important actions for the current view, and may include simple controls for switching between views.</p>

<p>Action Bar 用来承载与当前页面相关的主要操作，也可用于页面的切换。</p>

<h4>Navigation Drawer</h4>

<p>If your app&rsquo;s structure is more complex, the navigation drawer can display the main navigation options. The navigation drawer expands from the left edge of the screen, overlaying the content area but not the action bar.</p>

<p>Navigation Drawer 的弹出不覆盖 Action Bar，展示方式与目前流行在iOS应用中的侧边栏有所不同。</p>

<h4>Content Area</h4>

<p>The space where the content of your app is displayed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Design Principles]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/15/ios-design-principles/"/>
    <updated>2014-07-15T21:12:37+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/15/ios-design-principles</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Objective-C和Swift]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/14/something-about-objective-c-and-swift/"/>
    <updated>2014-07-14T10:47:10+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/14/something-about-objective-c-and-swift</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Design Principles]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/13/android-design-principles/"/>
    <updated>2014-07-13T22:13:04+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/13/android-design-principles</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://developer.android.com/design/get-started/principles.html">http://developer.android.com/design/get-started/principles.html</a></p>

<p>推荐应用：<br/>
<a href="http://www.any.do/">Any.do</a></p>

<p>These design principles were developed by and for the Android User Experience Team to keep user&rsquo;s best interests in mind.For Android developers and designers,they continue to underline the more detailed design guidelines for different types of devices.<br/>
Consider these principles as you apply your own creativity and design thinking.Deviate with purpose.<br/>
以下设计准则由Android用户体验团队秉承用户利益至上的原则开发。当你发挥自己的创造力和思考的时候，请将它们纳入考虑之中，并有意识地加以实践。</p>

<h2><em>Enchant ME</em></h2>

<p><em>迷住我</em></p>

<h3>Delight me in surprising ways</h3>

<p>以意想不到的方式取悦我</p>

<p>A beautiful surface,a carefully-places animation,or a well-timed sound effect is a joy to experience. Subtle effects contribute to a feeling of effortlessness and a sense that a powerful force is at hand.<br/>
一个漂亮的界面，一个悉心摆放的动画，或者一个适时的声音效果，都是一种快乐的体验。精细的效果能产生一种轻松的氛围，感觉手中有一股强大可控的力量。</p>

<p><img src="http://xuanxi.github.io/images/principles_delight.png" alt="principles_delight" /></p>

<h3>Real objects are more fun than buttons and menus</h3>

<p>真实对象比按钮和菜单更加有趣</p>

<p>Allow people to directly touch and manipulate objects in your app. It reduces the cognitive effort needed to perform a task while making it more emotionally satisfying.<br/>
允许人们直接触摸和操作你应用中的对象。它减少了执行一项任务所需的认识上的力量，并使之更加令人舒心。</p>

<p><img src="http://xuanxi.github.io/images/principles_real_objects.png" alt="principles_real_objects" /></p>

<h3>Let me make it mine</h3>

<p>让我把它变成我的</p>

<p>People love to add personal touches because it helps them feel at home and in control. Provide sensible, beautiful defaults, but also consider fun, optional customizations that don&rsquo;t hinder primary tasks.<br/>
人们喜欢加入个人手势，因为这让他们感觉自在与可控。提供可感的、漂亮的默认手势，但同时又考虑好玩、可选又不影响主要任务的定制项。</p>

<p><img src="http://xuanxi.github.io/images/principles_make_it_mine.png" alt="principles_make_it_mine" /></p>

<h3>Get to know me</h3>

<p>学会了解我</p>

<p>Learn peoples&#8217; preferences over time. Rather than asking them to make the same choices over and over, place previous choices within easy reach.<br/>
随着时间的推移，学习用户的偏好。不要反复地问用户同样的问题，将用户先前的选择列出来以供快捷选择。</p>

<p><img src="http://xuanxi.github.io/images/principles_get_to_know_me.png" alt="principles_get_to_know_me" /></p>

<h2><em>Simplify My Life</em></h2>

<p><em>简化我的生活</em></p>

<h3>Keep it brief</h3>

<p>用语简洁</p>

<p>Use short phrases with simple words. People are likely to skip sentences if they&rsquo;re long.<br/>
使用由简单词汇构成的短句。人们更倾向于跳过过长的句子。</p>

<p><img src="http://xuanxi.github.io/images/principles_keep_it_brief.png" alt="principles_keep_it_brief" /></p>

<h3>Pictures are faster than words</h3>

<p>图像比文字更能直达理解</p>

<p>Consider using pictures to explain ideas. They get people&rsquo;s attention and can be much more efficient than words.<br/>
考虑使用图像来解释观点。图像能捕获人们的注意力，往往比文字更有效率。</p>

<p><img src="http://xuanxi.github.io/images/principles_pictures.png" alt="principles_pictures" /></p>

<h3>Decide for me but let me have the final say</h3>

<p>为我决定，但最终由我说了算</p>

<p>Take your best guess and act rather than asking first. Too many choices and decisions make people unhappy. Just in case you get it wrong, allow for &lsquo;undo&rsquo;.<br/>
做最好的猜测，先做而非先问。太多的选择和决定会令人不愉。只当你可能会犯错时，才提供个‘撤消’，然后仍然先做后问。</p>

<p><img src="http://xuanxi.github.io/images/principles_decide_for_me.png" alt="principles_decide_for_me" /></p>

<h3>Only show what I need when I need it</h3>

<p>只在我需要的时候显示我所要的</p>

<p>People get overwhelmed when they see too much at once. Break tasks and information into small, digestible chunks. Hide options that aren&rsquo;t essential at the moment, and teach people as they go.<br/>
当一下子看到太多东西时，人们容易受打击。将任务和信息分解成小的、可消化的片段。隐藏当前非必须的选项，并指导人们如何走下去。</p>

<p><img src="http://xuanxi.github.io/images/principles_information_when_need_it.png" alt="principles_information_when_need_it" /></p>

<h3>I should always know where I am</h3>

<p>我应该总能知道我在哪里</p>

<p>Give people confidence that they know their way around. Make places in your app look distinct and use transitions to show relationships among screens. Provide feedback on tasks in progress.<br/>
给人们以清楚自己在哪的信心。把你应用中的不同场景设计得可区分，并使用变换效果来显示不同场景（窗口）之间的关系。提供任务进度反馈。</p>

<p><img src="http://xuanxi.github.io/images/principles_navigation.png" alt="principles_navigation" /></p>

<h3>Never lose my stuff</h3>

<p>决不能丢失我的东西</p>

<p>Save what people took time to create and let them access it from anywhere. Remember settings, personal touches, and creations across phones, tablets, and computers. It makes upgrading the easiest thing in the world.<br/>
保存用户花时间创建的东西，使得他们能随处访问。跨手机、平板电脑及计算机等平台，记住设置、个人手势以及作品。这将使得软件升级成为世界上最简单的事。</p>

<p><img src="http://xuanxi.github.io/images/principles_never_lose_stuff.png" alt="principles_never_lose_stuff" /></p>

<h3>If it looks the same, it should act the same</h3>

<p>如果看起来一样，所做的事就该一样</p>

<p>Help people discern functional differences by making them visually distinct rather than subtle. Avoid modes, which are places that look similar but act differently on the same input.<br/>
通过在视觉上加以区别，来帮助人们区分出功能的差异来。避免出现雷同场景，即看上去一样，但对于同一输入结果不同的场景。</p>

<p><img src="http://xuanxi.github.io/images/principles_looks_same.png" alt="principles_looks_same" /></p>

<h3>Only interrupt me if it&rsquo;s important</h3>

<p>只在十分重要时打断我</p>

<p>Like a good personal assistant, shield people from unimportant minutiae. People want to stay focused, and unless it&rsquo;s critical and time-sensitive, an interruption can be taxing and frustrating.<br/>
尤如一个好的个人助理，应该保护上司不被不重要的小事打扰。人们需要专注，除非情况十分严重并且紧急，打扰会是十分令人不悦的。</p>

<p><img src="http://xuanxi.github.io/images/principles_important_interruption.png" alt="principles_important_interruption" /></p>

<h2><em>Make Me Amazing</em></h2>

<p><em>让我惊讶</em></p>

<h3>Give me tricks that work everywhere</h3>

<p>给我点处处可行的诀窍</p>

<p>People feel great when they figure things out for themselves. Make your app easier to learn by leveraging visual patterns and muscle memory from other Android apps. For example, the swipe gesture may be a good navigational shortcut.<br/>
人们如果能够自己探索出东西来，将会兴奋不已。通过使用可视的模式和习惯操作，使你的应用更加易于学习。比如，猛击操作会是一个很好的导航快捷手势。</p>

<p><img src="http://xuanxi.github.io/images/principles_tricks.png" alt="principles_tricks" /></p>

<h3>It&rsquo;s not my fault</h3>

<p>这不是我的错</p>

<p>Be gentle in how you prompt people to make corrections. They want to feel smart when they use your app. If something goes wrong, give clear recovery instructions but spare them the technical details. If you can fix it behind the scenes, even better.<br/>
在提示用户改正错误时，应该礼貌。他们在用你应用的时候，需要被认为是聪明的。如果出错了，给出明确的恢复指令，而不是将技术细节留给他们。如果你可以在后台修复错误，那当然最好。</p>

<p><img src="http://xuanxi.github.io/images/principles_error.png" alt="principles_error" /></p>

<h3>Sprinkle encouragement</h3>

<p>挥洒鼓励</p>

<p>Break complex tasks into smaller steps that can be easily accomplished. Give feedback on actions, even if it&rsquo;s just a subtle glow.<br/>
将复杂的任务分解成小的容易被完成的步骤。对用户的操作给出反馈，即使只是一小步的成功。</p>

<p><img src="http://xuanxi.github.io/images/principles_sprinkle_encouragement.png" alt="principles_sprinkle_encouragement" /></p>

<h3>Do the heavy lifting for me</h3>

<p>为我担负重任</p>

<p>Make novices feel like experts by enabling them to do things they never thought they could. For example, shortcuts that combine multiple photo effects can make amateur photographs look amazing in only a few steps.<br/>
通过使他们做成他们认为自己不可能做到的事，让新手感觉自己像专家一样。比如，综合多个照片效果的快捷操作可使得外行简单几步做出惊人的照片效果来。</p>

<p><img src="http://xuanxi.github.io/images/principles_heavy_lifting.png" alt="principles_heavy_lifting" /></p>

<h3>Make important things fast</h3>

<p>让重要的事情能更快地完成</p>

<p>Not all actions are equal. Decide what&rsquo;s most important in your app and make it easy to find and fast to use, like the shutter button in a camera, or the pause button in a music player.<br/>
并非所有的操作都是平等的。确定你应用中最重要的操作，使它能很容易地被发现与使用，比如相机上的快门，又如音乐播放器上的暂停按钮。</p>

<p><img src="http://xuanxi.github.io/images/principles_make_important_fast.png" alt="principles_make_important_fast" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Blog!]]></title>
    <link href="http://xuanxi.github.io/blog/2014/07/13/hello-blog/"/>
    <updated>2014-07-13T15:05:19+08:00</updated>
    <id>http://xuanxi.github.io/blog/2014/07/13/hello-blog</id>
    <content type="html"><![CDATA[<blockquote><p>总结与分享是一种优秀的习惯。</p></blockquote>

<p>在搭建博客之前，印象笔记一直是我记录工作、学习、生活的工具，但印象笔记仅适合作为个人知识库，缺少与外界的互动沟通功能，而我很希望可以将自己的一些想法和总结分享出去，也希望得到大家的批评指正，于是，我的博客诞生了：）</p>

<p>Hello blog！</p>
]]></content>
  </entry>
  
</feed>
